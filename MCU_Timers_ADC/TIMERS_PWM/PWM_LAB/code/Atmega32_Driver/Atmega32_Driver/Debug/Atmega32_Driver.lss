
Atmega32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084b  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068d  00000000  00000000  00000bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e6  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000432  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_10>
  2c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8a:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER_INTREEUPT_HANDLER>:
#define F_CPU 8000000UL

uint32_t Timer_Counter = 0;

void Timer_CompareMatch_Interrupt_Handler(void)
{
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  9a:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  9e:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	a1 1d       	adc	r26, r1
  a6:	b1 1d       	adc	r27, r1
  a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ac:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b0:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  b4:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  b8:	81 35       	cpi	r24, 0x51	; 81
  ba:	9f 40       	sbci	r25, 0x0F	; 15
  bc:	a1 05       	cpc	r26, r1
  be:	b1 05       	cpc	r27, r1
  c0:	61 f4       	brne	.+24     	; 0xda <TIMER_INTREEUPT_HANDLER+0x48>
  c2:	98 b3       	in	r25, 0x18	; 24
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	89 27       	eor	r24, r25
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  d6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  da:	08 95       	ret

000000dc <main>:
		
		Timer_Counter = 0;
	}
}
int main(void)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x6>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x8>
  e4:	1f 92       	push	r1
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(DDRB,0);
  ea:	87 b3       	in	r24, 0x17	; 23
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	87 bb       	out	0x17, r24	; 23
	/* Set compare value */
	MCAL_TIMER0_SetCompareValue(100);
  f0:	84 e6       	ldi	r24, 0x64	; 100
  f2:	0e 94 c3 00 	call	0x186	; 0x186 <MCAL_TIMER0_SetCompareValue>
	
	/* Set timer configuration */
	TIMER0_Config_t TIMER0_Config;
	
	TIMER0_Config.Timer_Mode = TIMER0_MODE_CTC;
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_Config.Clock_Source = TIMER0_CLOCK_SOURCE_INTERNAL_PRESCALER_8;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_Config.IRQ_Enable = TIMER0_IRQ_ENABLE_TOIE0;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	8b 83       	std	Y+3, r24	; 0x03
	TIMER0_Config.P_IRQ_CallBack = TIMER_INTREEUPT_HANDLER;
 102:	89 e4       	ldi	r24, 0x49	; 73
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	9d 83       	std	Y+5, r25	; 0x05
 108:	8c 83       	std	Y+4, r24	; 0x04
	
	MCAL_TIMER0_Init(&TIMER0_Config);
 10a:	ce 01       	movw	r24, r28
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	0e 94 8a 00 	call	0x114	; 0x114 <MCAL_TIMER0_Init>
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x36>

00000114 <MCAL_TIMER0_Init>:
	{
		OCR0 = Duty_Cycle;
	}
	else if(G_TIMER0_Config.Timer_Mode == TIMER0_MODE_FAST_PWM_INVERTING)
	{
		OCR0 = (uint8_t)(255 - Duty_Cycle);
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	fe 01       	movw	r30, r28
 11e:	a6 e6       	ldi	r26, 0x66	; 102
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	01 90       	ld	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	8a 95       	dec	r24
 128:	e1 f7       	brne	.-8      	; 0x122 <MCAL_TIMER0_Init+0xe>
 12a:	93 b7       	in	r25, 0x33	; 51
 12c:	88 81       	ld	r24, Y
 12e:	89 2b       	or	r24, r25
 130:	83 bf       	out	0x33, r24	; 51
 132:	88 81       	ld	r24, Y
 134:	88 37       	cpi	r24, 0x78	; 120
 136:	11 f0       	breq	.+4      	; 0x13c <MCAL_TIMER0_Init+0x28>
 138:	88 36       	cpi	r24, 0x68	; 104
 13a:	19 f4       	brne	.+6      	; 0x142 <MCAL_TIMER0_Init+0x2e>
 13c:	87 b3       	in	r24, 0x17	; 23
 13e:	88 60       	ori	r24, 0x08	; 8
 140:	87 bb       	out	0x17, r24	; 23
 142:	93 b7       	in	r25, 0x33	; 51
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	89 2b       	or	r24, r25
 148:	83 bf       	out	0x33, r24	; 51
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	86 50       	subi	r24, 0x06	; 6
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	18 f4       	brcc	.+6      	; 0x158 <MCAL_TIMER0_Init+0x44>
 152:	87 b3       	in	r24, 0x17	; 23
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	87 bb       	out	0x17, r24	; 23
 158:	99 b7       	in	r25, 0x39	; 57
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	89 2b       	or	r24, r25
 15e:	89 bf       	out	0x39, r24	; 57
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	88 23       	and	r24, r24
 164:	21 f0       	breq	.+8      	; 0x16e <MCAL_TIMER0_Init+0x5a>
 166:	8f b7       	in	r24, 0x3f	; 63
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	8f bf       	out	0x3f, r24	; 63
 16c:	03 c0       	rjmp	.+6      	; 0x174 <MCAL_TIMER0_Init+0x60>
 16e:	8f b7       	in	r24, 0x3f	; 63
 170:	8f 77       	andi	r24, 0x7F	; 127
 172:	8f bf       	out	0x3f, r24	; 63
 174:	8b 81       	ldd	r24, Y+3	; 0x03
 176:	9c 81       	ldd	r25, Y+4	; 0x04
 178:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <GP_IRQ_CallBack+0x1>
 17c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <GP_IRQ_CallBack>
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <MCAL_TIMER0_SetCompareValue>:
 186:	8c bf       	out	0x3c, r24	; 60
 188:	08 95       	ret

0000018a <__vector_11>:
	}
}

ISR(TIMER0_OVF_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	GP_IRQ_CallBack();
 1ac:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <GP_IRQ_CallBack>
 1b0:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <GP_IRQ_CallBack+0x1>
 1b4:	09 95       	icall
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	GP_IRQ_CallBack();
 1fa:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <GP_IRQ_CallBack>
 1fe:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <GP_IRQ_CallBack+0x1>
 202:	09 95       	icall
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
