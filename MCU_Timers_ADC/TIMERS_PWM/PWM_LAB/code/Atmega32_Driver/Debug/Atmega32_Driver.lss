
Atmega32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081f  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000675  00000000  00000000  00000b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ac  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  0000157c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fd  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00001acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001d3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_10>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

uint32_t Timer_Counter = 0;


int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(DDRB,3);
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	87 bb       	out	0x17, r24	; 23
	
	TIMER0_Config_t TMR_CFG;
	
	TMR_CFG.Timer_Mode = TIMER0_MODE_FAST_PWM_INVERTING;
  a6:	88 e7       	ldi	r24, 0x78	; 120
  a8:	89 83       	std	Y+1, r24	; 0x01
	TMR_CFG.Clock_Source = TIMER0_CLOCK_SOURCE_INTERNAL_PRESCALER_8;
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	8a 83       	std	Y+2, r24	; 0x02
	TMR_CFG.IRQ_Enable = TIMER0_IRQ_ENABLE_NONE;
  ae:	1b 82       	std	Y+3, r1	; 0x03
	TMR_CFG.P_IRQ_CallBack = NULL;
  b0:	1d 82       	std	Y+5, r1	; 0x05
  b2:	1c 82       	std	Y+4, r1	; 0x04
	
	MCAL_TIMER0_Init(&TMR_CFG);
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <MCAL_TIMER0_Init>
    /* Replace with your application code */
    while (1) 
    {
		MCAL_PWM_DutyCycle(100);
  bc:	84 e6       	ldi	r24, 0x64	; 100
  be:	0e 94 9b 00 	call	0x136	; 0x136 <MCAL_PWM_DutyCycle>
  c2:	fc cf       	rjmp	.-8      	; 0xbc <main+0x2a>

000000c4 <MCAL_TIMER0_Init>:
}


void MCAL_TIMER0_GetCompareValue(uint8_t* TicksNumber)
{
	*TicksNumber = TCNT0;
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ec 01       	movw	r28, r24
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	fe 01       	movw	r30, r28
  ce:	a2 e6       	ldi	r26, 0x62	; 98
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	8a 95       	dec	r24
  d8:	e1 f7       	brne	.-8      	; 0xd2 <MCAL_TIMER0_Init+0xe>
  da:	93 b7       	in	r25, 0x33	; 51
  dc:	88 81       	ld	r24, Y
  de:	89 2b       	or	r24, r25
  e0:	83 bf       	out	0x33, r24	; 51
  e2:	88 81       	ld	r24, Y
  e4:	88 37       	cpi	r24, 0x78	; 120
  e6:	11 f0       	breq	.+4      	; 0xec <MCAL_TIMER0_Init+0x28>
  e8:	88 36       	cpi	r24, 0x68	; 104
  ea:	19 f4       	brne	.+6      	; 0xf2 <MCAL_TIMER0_Init+0x2e>
  ec:	87 b3       	in	r24, 0x17	; 23
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	93 b7       	in	r25, 0x33	; 51
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	89 2b       	or	r24, r25
  f8:	83 bf       	out	0x33, r24	; 51
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	86 50       	subi	r24, 0x06	; 6
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	18 f4       	brcc	.+6      	; 0x108 <MCAL_TIMER0_Init+0x44>
 102:	87 b3       	in	r24, 0x17	; 23
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	87 bb       	out	0x17, r24	; 23
 108:	99 b7       	in	r25, 0x39	; 57
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	89 2b       	or	r24, r25
 10e:	89 bf       	out	0x39, r24	; 57
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	88 23       	and	r24, r24
 114:	21 f0       	breq	.+8      	; 0x11e <MCAL_TIMER0_Init+0x5a>
 116:	8f b7       	in	r24, 0x3f	; 63
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8f bf       	out	0x3f, r24	; 63
 11c:	03 c0       	rjmp	.+6      	; 0x124 <MCAL_TIMER0_Init+0x60>
 11e:	8f b7       	in	r24, 0x3f	; 63
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	8f bf       	out	0x3f, r24	; 63
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	9c 81       	ldd	r25, Y+4	; 0x04
 128:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <MCAL_PWM_DutyCycle>:
}


void MCAL_PWM_DutyCycle(uint8_t Duty_Cycle)
{
	if(G_TIMER0_Config.Timer_Mode == TIMER0_MODE_FAST_PWM_NONINVERTING)
 136:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <G_TIMER0_Config>
 13a:	98 36       	cpi	r25, 0x68	; 104
 13c:	11 f4       	brne	.+4      	; 0x142 <MCAL_PWM_DutyCycle+0xc>
	{
		OCR0 = Duty_Cycle;
 13e:	8c bf       	out	0x3c, r24	; 60
 140:	08 95       	ret
	}
	else if(G_TIMER0_Config.Timer_Mode == TIMER0_MODE_FAST_PWM_INVERTING)
 142:	98 37       	cpi	r25, 0x78	; 120
 144:	11 f4       	brne	.+4      	; 0x14a <MCAL_PWM_DutyCycle+0x14>
	{
		OCR0 = (uint8_t)(255 - Duty_Cycle);
 146:	80 95       	com	r24
 148:	8c bf       	out	0x3c, r24	; 60
 14a:	08 95       	ret

0000014c <__vector_11>:
	}
}

ISR(TIMER0_OVF_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	GP_IRQ_CallBack();
 16e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 172:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 176:	09 95       	icall
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
	GP_IRQ_CallBack();
 1bc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c0:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c4:	09 95       	icall
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
