
Arm_Modes.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001064  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001194  08001194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011c8  080011c8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080011c8  080011c8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011c8  080011c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011c8  080011c8  000111c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011cc  080011cc  000111cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080011d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000004  080011d4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  080011d4  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a4b  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008e5  00000000  00000000  00021a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00022360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  000225a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f18  00000000  00000000  00022788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ca9  00000000  00000000  000246a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00010337  00000000  00000000  00027349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00037680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000724  00000000  00000000  000376d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	0800117c 	.word	0x0800117c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	0800117c 	.word	0x0800117c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010
 800021c:	f3ef 8314 	mrs	r3, CONTROL
 8000220:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000224:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000228:	f383 8814 	msr	CONTROL, r3

0800022c <HardFault_Handler>:
#define __WEAK__	weak
#define __NACKED__	naked

unsigned char SysTickLED ;

_attribute_(__WEAK__) void HardFault_Handler (void) { while(1); }
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
 8000230:	e7fe      	b.n	8000230 <HardFault_Handler+0x4>

08000232 <MemManage_Handler>:

_attribute_(__WEAK__) void MemManage_Handler(void) { while(1); }
 8000232:	b480      	push	{r7}
 8000234:	af00      	add	r7, sp, #0
 8000236:	e7fe      	b.n	8000236 <MemManage_Handler+0x4>

08000238 <BusFault_Handler>:

_attribute_(__WEAK__) void BusFault_Handler(void) { while(1); }
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
 800023c:	e7fe      	b.n	800023c <BusFault_Handler+0x4>

0800023e <UsageFault_Handler>:

_attribute_(__WEAK__) void UsageFault_Handler(void) { while(1); }
 800023e:	b480      	push	{r7}
 8000240:	af00      	add	r7, sp, #0
 8000242:	e7fe      	b.n	8000242 <UsageFault_Handler+0x4>

08000244 <SVC_Handler>:

  __attribute ((naked)) void SVC_Handler(){
		__asm ("tst lr, #4 \n\t"
 8000244:	f01e 0f04 	tst.w	lr, #4
 8000248:	bf0c      	ite	eq
 800024a:	f3ef 8008 	mrseq	r0, MSP
 800024e:	f3ef 8009 	mrsne	r0, PSP
 8000252:	f000 bba5 	b.w	80009a0 <OS_SVC>
				"ITE EQ \n\t" //To execute Thumb instructions conditionally, you can either use an IT instruction, or a conditional branch instruction.
				"mrseq r0,MSP \n\t "
				"mrsne r0,PSP \n\t"
				"B OS_SVC");

  }
 8000256:	bf00      	nop

08000258 <HW_Init>:


 void HW_Init(){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	  // initilaize Clock tree  (RCC -> Systick ) 8HZ

	 //decreas PENDSV priority to be equal than or equal SYSTICk
	 __NVIC_SetPriority(PendSV_IRQn, 15);
 800025c:	210f      	movs	r1, #15
 800025e:	f06f 0001 	mvn.w	r0, #1
 8000262:	f7ff ff8f 	bl	8000184 <__NVIC_SetPriority>
 }
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <Trigger_OS_PENDSV>:

 void Trigger_OS_PENDSV(){
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <Trigger_OS_PENDSV+0x18>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	4a03      	ldr	r2, [pc, #12]	; (8000284 <Trigger_OS_PENDSV+0x18>)
 8000276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800027a:	6053      	str	r3, [r2, #4]
 }
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <Start_Ticker>:
 void Start_Ticker(){
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	  // initilaize Clock tree  (RCC -> Systick ) 8HZ
	 // x count = 1ms So we need 8000 tick
	 SysTick_Config(8000);
 800028c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000290:	f7ff ffa2 	bl	80001d8 <SysTick_Config>
 }
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}

08000298 <SysTick_Handler>:

 void SysTick_Handler(){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	 SysTickLED ^= 1;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <SysTick_Handler+0x24>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	f083 0301 	eor.w	r3, r3, #1
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <SysTick_Handler+0x24>)
 80002a8:	701a      	strb	r2, [r3, #0]
	 MYRTOS_Update_TasksWaitingTime();
 80002aa:	f000 fc21 	bl	8000af0 <MYRTOS_Update_TasksWaitingTime>
	 // Determine Pcurrent and Pnext
	 Decide_whatNext();
 80002ae:	f000 fb25 	bl	80008fc <Decide_whatNext>
	 // Switch context &restore
	 Trigger_OS_PENDSV();
 80002b2:	f7ff ffdb 	bl	800026c <Trigger_OS_PENDSV>
 }
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000020 	.word	0x20000020

080002c0 <FIFO_init>:


#include "My_RTOS_FIFO.h"


Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]

	if(!buff )
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d101      	bne.n	80002d6 <FIFO_init+0x16>
		return FIFO_NULL;
 80002d2:	2303      	movs	r3, #3
 80002d4:	e011      	b.n	80002fa <FIFO_init+0x3a>

	fifo->base = buff ;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	68da      	ldr	r2, [r3, #12]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002f8:	2300      	movs	r3, #0

}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d003      	beq.n	800031e <FIFO_enqueue+0x1a>
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800031e:	2303      	movs	r3, #3
 8000320:	e02d      	b.n	800037e <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	685a      	ldr	r2, [r3, #4]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	429a      	cmp	r2, r3
 800032c:	d107      	bne.n	800033e <FIFO_enqueue+0x3a>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	691b      	ldr	r3, [r3, #16]
 8000336:	429a      	cmp	r2, r3
 8000338:	d101      	bne.n	800033e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800033a:	2301      	movs	r3, #1
 800033c:	e01f      	b.n	800037e <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	683a      	ldr	r2, [r7, #0]
 8000344:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	1c5a      	adds	r2, r3, #1
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	68d2      	ldr	r2, [r2, #12]
 8000358:	4611      	mov	r1, r2
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	6912      	ldr	r2, [r2, #16]
 800035e:	0092      	lsls	r2, r2, #2
 8000360:	440a      	add	r2, r1
 8000362:	3a04      	subs	r2, #4
 8000364:	4293      	cmp	r3, r2
 8000366:	d104      	bne.n	8000372 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	68da      	ldr	r2, [r3, #12]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	e004      	b.n	800037c <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	1d1a      	adds	r2, r3, #4
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800037c:	2300      	movs	r3, #0


}
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <FIFO_dequeue+0x1a>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d101      	bne.n	80003a6 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 80003a2:	2303      	movs	r3, #3
 80003a4:	e028      	b.n	80003f8 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685a      	ldr	r2, [r3, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d101      	bne.n	80003b6 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003b2:	2302      	movs	r3, #2
 80003b4:	e020      	b.n	80003f8 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	1e5a      	subs	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	68d2      	ldr	r2, [r2, #12]
 80003d2:	4611      	mov	r1, r2
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	6912      	ldr	r2, [r2, #16]
 80003d8:	0092      	lsls	r2, r2, #2
 80003da:	440a      	add	r2, r1
 80003dc:	3a04      	subs	r2, #4
 80003de:	4293      	cmp	r3, r2
 80003e0:	d104      	bne.n	80003ec <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	68da      	ldr	r2, [r3, #12]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	e004      	b.n	80003f6 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	1d1a      	adds	r2, r3, #4
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003f6:	2300      	movs	r3, #0
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
	...

08000404 <PendSV_Handler>:

__attribute ((naked)) void PendSV_Handler()
{
	//save context of Current task
	//get current task PSP from CPU registers XPSR ---> r0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000404:	4b6f      	ldr	r3, [pc, #444]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000406:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800040a:	f3ef 8009 	mrs	r0, PSP
 800040e:	4602      	mov	r2, r0
 8000410:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP-- ;
 8000412:	4b6c      	ldr	r3, [pc, #432]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000414:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000418:	699a      	ldr	r2, [r3, #24]
 800041a:	3a04      	subs	r2, #4
 800041c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800041e:	4b69      	ldr	r3, [pc, #420]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000420:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4622      	mov	r2, r4
 8000428:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800042a:	4b66      	ldr	r3, [pc, #408]	; (80005c4 <PendSV_Handler+0x1c0>)
 800042c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000430:	699a      	ldr	r2, [r3, #24]
 8000432:	3a04      	subs	r2, #4
 8000434:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000436:	4b63      	ldr	r3, [pc, #396]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000438:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	462a      	mov	r2, r5
 8000440:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000442:	4b60      	ldr	r3, [pc, #384]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000444:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000448:	699a      	ldr	r2, [r3, #24]
 800044a:	3a04      	subs	r2, #4
 800044c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800044e:	4b5d      	ldr	r3, [pc, #372]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000450:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4632      	mov	r2, r6
 8000458:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800045a:	4b5a      	ldr	r3, [pc, #360]	; (80005c4 <PendSV_Handler+0x1c0>)
 800045c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000460:	699a      	ldr	r2, [r3, #24]
 8000462:	3a04      	subs	r2, #4
 8000464:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000466:	4b57      	ldr	r3, [pc, #348]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000468:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	463a      	mov	r2, r7
 8000470:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000472:	4b54      	ldr	r3, [pc, #336]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000474:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000478:	699a      	ldr	r2, [r3, #24]
 800047a:	3a04      	subs	r2, #4
 800047c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800047e:	4b51      	ldr	r3, [pc, #324]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000480:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4642      	mov	r2, r8
 8000488:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800048a:	4b4e      	ldr	r3, [pc, #312]	; (80005c4 <PendSV_Handler+0x1c0>)
 800048c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000490:	699a      	ldr	r2, [r3, #24]
 8000492:	3a04      	subs	r2, #4
 8000494:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000496:	4b4b      	ldr	r3, [pc, #300]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000498:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	464a      	mov	r2, r9
 80004a0:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 80004a2:	4b48      	ldr	r3, [pc, #288]	; (80005c4 <PendSV_Handler+0x1c0>)
 80004a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a8:	699a      	ldr	r2, [r3, #24]
 80004aa:	3a04      	subs	r2, #4
 80004ac:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80004ae:	4b45      	ldr	r3, [pc, #276]	; (80005c4 <PendSV_Handler+0x1c0>)
 80004b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4652      	mov	r2, sl
 80004b8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 80004ba:	4b42      	ldr	r3, [pc, #264]	; (80005c4 <PendSV_Handler+0x1c0>)
 80004bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	3a04      	subs	r2, #4
 80004c4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80004c6:	4b3f      	ldr	r3, [pc, #252]	; (80005c4 <PendSV_Handler+0x1c0>)
 80004c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	465a      	mov	r2, fp
 80004d0:	601a      	str	r2, [r3, #0]

	//save Current value of PSP
	//Restore Context of the nexxt stack


	if (OS_Control.NextTask != NULL){
 80004d2:	4b3c      	ldr	r3, [pc, #240]	; (80005c4 <PendSV_Handler+0x1c0>)
 80004d4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d009      	beq.n	80004f0 <PendSV_Handler+0xec>
	OS_Control.CurrentTask = OS_Control.NextTask ;
 80004dc:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <PendSV_Handler+0x1c0>)
 80004de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004e2:	4a38      	ldr	r2, [pc, #224]	; (80005c4 <PendSV_Handler+0x1c0>)
 80004e4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL ;
 80004e8:	4b36      	ldr	r3, [pc, #216]	; (80005c4 <PendSV_Handler+0x1c0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile("mov r11,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80004f0:	4b34      	ldr	r3, [pc, #208]	; (80005c4 <PendSV_Handler+0x1c0>)
 80004f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 80004fc:	4b31      	ldr	r3, [pc, #196]	; (80005c4 <PendSV_Handler+0x1c0>)
 80004fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000502:	699a      	ldr	r2, [r3, #24]
 8000504:	3204      	adds	r2, #4
 8000506:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000508:	4b2e      	ldr	r3, [pc, #184]	; (80005c4 <PendSV_Handler+0x1c0>)
 800050a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000516:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800051a:	699a      	ldr	r2, [r3, #24]
 800051c:	3204      	adds	r2, #4
 800051e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000522:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <PendSV_Handler+0x1c0>)
 800052e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000532:	699a      	ldr	r2, [r3, #24]
 8000534:	3204      	adds	r2, #4
 8000536:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <PendSV_Handler+0x1c0>)
 800053a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000546:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800054a:	699a      	ldr	r2, [r3, #24]
 800054c:	3204      	adds	r2, #4
 800054e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000552:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <PendSV_Handler+0x1c0>)
 800055e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000562:	699a      	ldr	r2, [r3, #24]
 8000564:	3204      	adds	r2, #4
 8000566:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <PendSV_Handler+0x1c0>)
 800056a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000576:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800057a:	699a      	ldr	r2, [r3, #24]
 800057c:	3204      	adds	r2, #4
 800057e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000580:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <PendSV_Handler+0x1c0>)
 8000582:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <PendSV_Handler+0x1c0>)
 800058e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000592:	699a      	ldr	r2, [r3, #24]
 8000594:	3204      	adds	r2, #4
 8000596:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <PendSV_Handler+0x1c0>)
 800059a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <PendSV_Handler+0x1c0>)
 80005a6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005aa:	699a      	ldr	r2, [r3, #24]
 80005ac:	3204      	adds	r2, #4
 80005ae:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <PendSV_Handler+0x1c0>)
 80005b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 80005be:	4770      	bx	lr

}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	20000024 	.word	0x20000024

080005c8 <MYRTOS_IdleTask>:



unsigned char IdleTaskLed ;
void MYRTOS_IdleTask()
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	// wfe ===> wait for interrupt used to make interrupt in low power mode until interrupt received

	while(1)
	{
		IdleTaskLed ^= 1 ;
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <MYRTOS_IdleTask+0x18>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	f083 0301 	eor.w	r3, r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <MYRTOS_IdleTask+0x18>)
 80005d8:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 80005da:	bf20      	wfe
		IdleTaskLed ^= 1 ;
 80005dc:	e7f6      	b.n	80005cc <MYRTOS_IdleTask+0x4>
 80005de:	bf00      	nop
 80005e0:	200003b8 	.word	0x200003b8

080005e4 <MYRTOS_Create_MainStack>:
}



void MYRTOS_Create_MainStack()
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <MYRTOS_Create_MainStack+0x34>)
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MYRTOS_Create_MainStack+0x38>)
 80005ec:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MYRTOS_Create_MainStack+0x38>)
 80005f2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80005f6:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <MYRTOS_Create_MainStack+0x38>)
 80005fc:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	 //Allign 8 bytes between Main Stack and PSP tasks

	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MYRTOS_Create_MainStack+0x38>)
 8000602:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000606:	3b08      	subs	r3, #8
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <MYRTOS_Create_MainStack+0x38>)
 800060a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//if (_E_MSP_Task <&_eheap) Error:excedded the availble stack size
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20005000 	.word	0x20005000
 800061c:	20000024 	.word	0x20000024

08000620 <MYRTOS_init>:

MYRTOS_errorID MYRTOS_init()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = NoError ;
 8000626:	2300      	movs	r3, #0
 8000628:	71fb      	strb	r3, [r7, #7]

	//update Os if susbended
	OS_Control.OSmodeID = OSsuspend ;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MYRTOS_init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//specify main stack for OS
	MYRTOS_Create_MainStack();
 8000632:	f7ff ffd7 	bl	80005e4 <MYRTOS_Create_MainStack>

	//create OS ready queue
	if (FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100) !=FIFO_NO_ERROR)
 8000636:	2264      	movs	r2, #100	; 0x64
 8000638:	4913      	ldr	r1, [pc, #76]	; (8000688 <MYRTOS_init+0x68>)
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <MYRTOS_init+0x6c>)
 800063c:	f7ff fe40 	bl	80002c0 <FIFO_init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <MYRTOS_init+0x2c>
	{
		error += Ready_Queue_init_error ;
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	3301      	adds	r3, #1
 800064a:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE TASK
	strcpy (MYRTOS_idleTask.TaskName, "idleTask");
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MYRTOS_init+0x70>)
 800064e:	4a11      	ldr	r2, [pc, #68]	; (8000694 <MYRTOS_init+0x74>)
 8000650:	ca07      	ldmia	r2, {r0, r1, r2}
 8000652:	c303      	stmia	r3!, {r0, r1}
 8000654:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 255 ;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MYRTOS_init+0x78>)
 8000658:	22ff      	movs	r2, #255	; 0xff
 800065a:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_IdleTask ;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MYRTOS_init+0x78>)
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <MYRTOS_init+0x7c>)
 8000660:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300 ;
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MYRTOS_init+0x78>)
 8000664:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000668:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <MYRTOS_init+0x78>)
 800066c:	f000 f858 	bl	8000720 <MYRTOS_CreateTask>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4413      	add	r3, r2
 8000678:	71fb      	strb	r3, [r7, #7]

	return error ;
 800067a:	79fb      	ldrb	r3, [r7, #7]

}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000024 	.word	0x20000024
 8000688:	200001e4 	.word	0x200001e4
 800068c:	200001d0 	.word	0x200001d0
 8000690:	20000390 	.word	0x20000390
 8000694:	08001194 	.word	0x08001194
 8000698:	20000374 	.word	0x20000374
 800069c:	080005c9 	.word	0x080005c9

080006a0 <MyRTOS_Create_TaskStack>:


void MyRTOS_Create_TaskStack(Task_ref* Tref)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	 * 				-----------------
	 * 				___r0____
	 * 				-----------------
	 * 				___	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 * */
	Tref->Current_PSP = Tref->_S_PSP_Task ;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP-- ;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	1f1a      	subs	r2, r3, #4
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000;    //XPSR should T =1 to avoid BUS fault;//0x01000000
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006c4:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	1f1a      	subs	r2, r3, #4
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ;  //PC ==> task entry
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	601a      	str	r2, [r3, #0]


	Tref->Current_PSP-- ;  //LR ==> 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	1f1a      	subs	r2, r3, #4
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP)  = 0xFFFFFFFD ;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f06f 0202 	mvn.w	r2, #2
 80006ec:	601a      	str	r2, [r3, #0]

	for (int  j=0 ; j< 13 ; j++ )
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e00b      	b.n	800070c <MyRTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP-- ;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	1f1a      	subs	r2, r3, #4
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP)  = 0 ;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3301      	adds	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b0c      	cmp	r3, #12
 8000710:	ddf0      	ble.n	80006f4 <MyRTOS_Create_TaskStack+0x54>

	}
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
	...

08000720 <MYRTOS_CreateTask>:

MYRTOS_errorID MYRTOS_CreateTask(Task_ref* Tref)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error = NoError ;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]

	// create it's own psp Stack;
	//check task stack size
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MYRTOS_CreateTask+0x74>)
 800072e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size ;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	691a      	ldr	r2, [r3, #16]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	1ad2      	subs	r2, r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	615a      	str	r2, [r3, #20]
																			 *

																			 *
																			 * */

	if(Tref->_E_PSP_Task < (unsigned int)(&(_eheap)))
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MYRTOS_CreateTask+0x78>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d201      	bcs.n	8000752 <MYRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize ;
 800074e:	2302      	movs	r3, #2
 8000750:	e01b      	b.n	800078a <MYRTOS_CreateTask+0x6a>
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	3b08      	subs	r3, #8
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <MYRTOS_CreateTask+0x74>)
 800075a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MyRTOS_Create_TaskStack( Tref);
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff9e 	bl	80006a0 <MyRTOS_Create_TaskStack>

	//update sch Table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks]= Tref ;
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MYRTOS_CreateTask+0x74>)
 8000766:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800076a:	490a      	ldr	r1, [pc, #40]	; (8000794 <MYRTOS_CreateTask+0x74>)
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++ ;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MYRTOS_CreateTask+0x74>)
 8000774:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000778:	3301      	adds	r3, #1
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <MYRTOS_CreateTask+0x74>)
 800077c:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c


	//Task State Update -> Suspend
	Tref->TaskState = Suspend ;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 8000788:	7bfb      	ldrb	r3, [r7, #15]

}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000024 	.word	0x20000024
 8000798:	20000b50 	.word	0x20000b50

0800079c <bubbleSort>:
 * Note			- none
 * */


void bubbleSort()
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	Task_ref* temp ;
	n = OS_Control.NoOfActiveTasks ;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <bubbleSort+0x8c>)
 80007a4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80007a8:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	e030      	b.n	8000812 <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	e023      	b.n	80007fe <bubbleSort+0x62>
			if (OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j + 1]->priority)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <bubbleSort+0x8c>)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	791a      	ldrb	r2, [r3, #4]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4918      	ldr	r1, [pc, #96]	; (8000828 <bubbleSort+0x8c>)
 80007c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d913      	bls.n	80007f8 <bubbleSort+0x5c>
			{
				temp = OS_Control.OSTasks[j] ;
 80007d0:	4a15      	ldr	r2, [pc, #84]	; (8000828 <bubbleSort+0x8c>)
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d8:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j + 1 ] ;
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <bubbleSort+0x8c>)
 80007e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e4:	4910      	ldr	r1, [pc, #64]	; (8000828 <bubbleSort+0x8c>)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j + 1] = temp ;
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	3301      	adds	r3, #1
 80007f0:	490d      	ldr	r1, [pc, #52]	; (8000828 <bubbleSort+0x8c>)
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	3b01      	subs	r3, #1
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	429a      	cmp	r2, r3
 800080a:	d3d4      	bcc.n	80007b6 <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3b01      	subs	r3, #1
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	d3c9      	bcc.n	80007b0 <bubbleSort+0x14>
			}

}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000024 	.word	0x20000024

0800082c <MyRTOS_Update_Schadule_tables>:
void MyRTOS_Update_Schadule_tables()
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
	Task_ref* temp =NULL ;
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask ;
	Task_ref* PnextTask ;
	int i = 0 ;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubbleSort();
 800083a:	f7ff ffaf 	bl	800079c <bubbleSort>
	//2- free Ready Queue
	while(FIFO_dequeue(&Ready_QUEUE, &temp /* pointer to pointer */)!=FIFO_EMPTY);
 800083e:	bf00      	nop
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	482b      	ldr	r0, [pc, #172]	; (80008f4 <MyRTOS_Update_Schadule_tables+0xc8>)
 8000846:	f7ff fd9f 	bl	8000388 <FIFO_dequeue>
 800084a:	4603      	mov	r3, r0
 800084c:	2b02      	cmp	r3, #2
 800084e:	d1f7      	bne.n	8000840 <MyRTOS_Update_Schadule_tables+0x14>
		// |-->	we will loop in active tasks in Scheduler after sorting it with bubble sort algorithm.
		// |--> set temperory task and next temprory task and put 3 Scenarios.
		//	  |--> if Ptask priority < next task
		//	  |--> if pTask priority equal to next task priority So we will go on round robin until one task of both terminate
		//	  |--> if Ptask priority > next task  (and it's not impossible after bubble sorting)
	while(i< OS_Control.NoOfActiveTasks)
 8000850:	e044      	b.n	80008dc <MyRTOS_Update_Schadule_tables+0xb0>
	{
		Ptask = OS_Control.OSTasks[i] ;
 8000852:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <MyRTOS_Update_Schadule_tables+0xcc>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085a:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1] ;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3301      	adds	r3, #1
 8000860:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <MyRTOS_Update_Schadule_tables+0xcc>)
 8000862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000866:	607b      	str	r3, [r7, #4]
		if (Ptask->TaskState != Suspend)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800086e:	2b00      	cmp	r3, #0
 8000870:	d031      	beq.n	80008d6 <MyRTOS_Update_Schadule_tables+0xaa>
		{
			//in case we reached to the end of avaliable OSTASKS
			if (PnextTask->TaskState == Suspend)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000878:	2b00      	cmp	r3, #0
 800087a:	d108      	bne.n	800088e <MyRTOS_Update_Schadule_tables+0x62>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	481d      	ldr	r0, [pc, #116]	; (80008f4 <MyRTOS_Update_Schadule_tables+0xc8>)
 8000880:	f7ff fd40 	bl	8000304 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2203      	movs	r2, #3
 8000888:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 800088c:	e02e      	b.n	80008ec <MyRTOS_Update_Schadule_tables+0xc0>
			}
			//	if the Ptask priority > nexttask then (lowest number is meaning higher priority)
			if (Ptask->priority < PnextTask->priority )
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	791a      	ldrb	r2, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	429a      	cmp	r2, r3
 8000898:	d208      	bcs.n	80008ac <MyRTOS_Update_Schadule_tables+0x80>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	4815      	ldr	r0, [pc, #84]	; (80008f4 <MyRTOS_Update_Schadule_tables+0xc8>)
 800089e:	f7ff fd31 	bl	8000304 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2203      	movs	r2, #3
 80008a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 80008aa:	e01f      	b.n	80008ec <MyRTOS_Update_Schadule_tables+0xc0>
			}else if (Ptask->priority == PnextTask->priority)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	791a      	ldrb	r2, [r3, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d108      	bne.n	80008ca <MyRTOS_Update_Schadule_tables+0x9e>
			{
				//	if the Ptask priority == nexttask then
				//		push Ptask to ready state
				//	And make the ptask = nexttask  and nexttask++
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <MyRTOS_Update_Schadule_tables+0xc8>)
 80008bc:	f7ff fd22 	bl	8000304 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2203      	movs	r2, #3
 80008c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80008c8:	e005      	b.n	80008d6 <MyRTOS_Update_Schadule_tables+0xaa>
			}else if (Ptask->priority > PnextTask->priority)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	791a      	ldrb	r2, [r3, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d809      	bhi.n	80008ea <MyRTOS_Update_Schadule_tables+0xbe>
				break ;
			}
		}


		i++ ;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	3301      	adds	r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.NoOfActiveTasks)
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MyRTOS_Update_Schadule_tables+0xcc>)
 80008de:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8b4      	bhi.n	8000852 <MyRTOS_Update_Schadule_tables+0x26>
	}

}
 80008e8:	e000      	b.n	80008ec <MyRTOS_Update_Schadule_tables+0xc0>
				break ;
 80008ea:	bf00      	nop
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001d0 	.word	0x200001d0
 80008f8:	20000024 	.word	0x20000024

080008fc <Decide_whatNext>:
 * 													|		The next task is dequeued from the Ready Queue and setb to the running state
 * 													|>if the Current Task has the same priority as The next task
 * 														|--> added back to the ready queue and its state is set to ready
 * */
void Decide_whatNext()
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	//if Ready Queue is empty && OS_Control->currentTask != suspend
	if (Ready_QUEUE.counter == 0 && OS_Control.CurrentTask->TaskState != Suspend) //FIFO_EMPTY
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <Decide_whatNext+0x98>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d11a      	bne.n	800093e <Decide_whatNext+0x42>
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <Decide_whatNext+0x9c>)
 800090a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800090e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000912:	2b00      	cmp	r3, #0
 8000914:	d013      	beq.n	800093e <Decide_whatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running ;
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <Decide_whatNext+0x9c>)
 8000918:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800091c:	2201      	movs	r2, #1
 800091e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again(round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <Decide_whatNext+0x9c>)
 8000924:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000928:	4619      	mov	r1, r3
 800092a:	481a      	ldr	r0, [pc, #104]	; (8000994 <Decide_whatNext+0x98>)
 800092c:	f7ff fcea 	bl	8000304 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask ;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <Decide_whatNext+0x9c>)
 8000932:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <Decide_whatNext+0x9c>)
 8000938:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = ready ;
		}
	}
}
 800093c:	e027      	b.n	800098e <Decide_whatNext+0x92>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 800093e:	4917      	ldr	r1, [pc, #92]	; (800099c <Decide_whatNext+0xa0>)
 8000940:	4814      	ldr	r0, [pc, #80]	; (8000994 <Decide_whatNext+0x98>)
 8000942:	f7ff fd21 	bl	8000388 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running ;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <Decide_whatNext+0x9c>)
 8000948:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800094c:	2201      	movs	r2, #1
 800094e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority )&&(OS_Control.CurrentTask->TaskState != Suspend))
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <Decide_whatNext+0x9c>)
 8000954:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000958:	791a      	ldrb	r2, [r3, #4]
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <Decide_whatNext+0x9c>)
 800095c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000960:	791b      	ldrb	r3, [r3, #4]
 8000962:	429a      	cmp	r2, r3
 8000964:	d113      	bne.n	800098e <Decide_whatNext+0x92>
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <Decide_whatNext+0x9c>)
 8000968:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800096c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00c      	beq.n	800098e <Decide_whatNext+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <Decide_whatNext+0x9c>)
 8000976:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <Decide_whatNext+0x98>)
 800097e:	f7ff fcc1 	bl	8000304 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = ready ;
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <Decide_whatNext+0x9c>)
 8000984:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000988:	2203      	movs	r2, #3
 800098a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200001d0 	.word	0x200001d0
 8000998:	20000024 	.word	0x20000024
 800099c:	200001c8 	.word	0x200001c8

080009a0 <OS_SVC>:

//Handler Mode
void OS_SVC(int* Stack_Frame)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,return address (PC) and XPSR
	unsigned char SVC_number ;
	SVC_number = *((unsigned char*)(((unsigned char*)Stack_Frame[6])-2)) ;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3318      	adds	r3, #24
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3b02      	subs	r3, #2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	73fb      	strb	r3, [r7, #15]

	switch (SVC_number)
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	dc02      	bgt.n	80009c0 <OS_SVC+0x20>
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	da03      	bge.n	80009c6 <OS_SVC+0x26>

		break;
	}


}
 80009be:	e01d      	b.n	80009fc <OS_SVC+0x5c>
	switch (SVC_number)
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d017      	beq.n	80009f4 <OS_SVC+0x54>
}
 80009c4:	e01a      	b.n	80009fc <OS_SVC+0x5c>
		MyRTOS_Update_Schadule_tables();
 80009c6:	f7ff ff31 	bl	800082c <MyRTOS_Update_Schadule_tables>
		if (OS_Control.OSmodeID == OsRunning)
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <OS_SVC+0x64>)
 80009cc:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d112      	bne.n	80009fa <OS_SVC+0x5a>
			if (strcmp(OS_Control.CurrentTask->TaskName,"idleTask") != 0)
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <OS_SVC+0x64>)
 80009d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009da:	331c      	adds	r3, #28
 80009dc:	490a      	ldr	r1, [pc, #40]	; (8000a08 <OS_SVC+0x68>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fbc6 	bl	8000170 <strcmp>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d007      	beq.n	80009fa <OS_SVC+0x5a>
				Decide_whatNext();
 80009ea:	f7ff ff87 	bl	80008fc <Decide_whatNext>
				Trigger_OS_PENDSV();
 80009ee:	f7ff fc3d 	bl	800026c <Trigger_OS_PENDSV>
		break;
 80009f2:	e002      	b.n	80009fa <OS_SVC+0x5a>
		MyRTOS_Update_Schadule_tables();
 80009f4:	f7ff ff1a 	bl	800082c <MyRTOS_Update_Schadule_tables>
		break;
 80009f8:	e000      	b.n	80009fc <OS_SVC+0x5c>
		break;
 80009fa:	bf00      	nop
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000024 	.word	0x20000024
 8000a08:	08001194 	.word	0x08001194

08000a0c <MYRTOS_OS_SVC_Set>:
 *
 * ********************************************************
 * --------------------------------------------------------
 */
MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	switch (ID)
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d817      	bhi.n	8000a4c <MYRTOS_OS_SVC_Set+0x40>
 8000a1c:	a201      	add	r2, pc, #4	; (adr r2, 8000a24 <MYRTOS_OS_SVC_Set+0x18>)
 8000a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a22:	bf00      	nop
 8000a24:	08000a39 	.word	0x08000a39
 8000a28:	08000a3d 	.word	0x08000a3d
 8000a2c:	08000a41 	.word	0x08000a41
 8000a30:	08000a45 	.word	0x08000a45
 8000a34:	08000a49 	.word	0x08000a49
	{
	case SVC_Activatetask:
		__asm("svc #0x00");
 8000a38:	df00      	svc	0
		break;
 8000a3a:	e007      	b.n	8000a4c <MYRTOS_OS_SVC_Set+0x40>
	case SVC_terminateTask:
		__asm("svc #0x01");
 8000a3c:	df01      	svc	1
		break;
 8000a3e:	e005      	b.n	8000a4c <MYRTOS_OS_SVC_Set+0x40>
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
 8000a40:	df02      	svc	2
		break;
 8000a42:	e003      	b.n	8000a4c <MYRTOS_OS_SVC_Set+0x40>
	case SVC_AquireMutex:
		__asm("svc #0x03");  //Assignment Task
 8000a44:	df03      	svc	3
		break;
 8000a46:	e001      	b.n	8000a4c <MYRTOS_OS_SVC_Set+0x40>
	case SVC_ReleaseMutex:
		__asm("svc #0x04"); //Assignment Task
 8000a48:	df04      	svc	4
		break;
 8000a4a:	bf00      	nop
	}
}
 8000a4c:	bf00      	nop
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <MYRTOS_ActivateTask>:

void MYRTOS_ActivateTask (Task_ref* Tref)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting ;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2202      	movs	r2, #2
 8000a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_Activatetask);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff ffcf 	bl	8000a0c <MYRTOS_OS_SVC_Set>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <MYRTOS_TerminateTask>:
void MYRTOS_TerminateTask (Task_ref* Tref)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Suspend ;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_terminateTask);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff ffc0 	bl	8000a0c <MYRTOS_OS_SVC_Set>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <MYRTOS_STARTOS>:
}



void MYRTOS_STARTOS()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID = OsRunning ;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MYRTOS_STARTOS+0x54>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default "Current Task =Idle Task"
	OS_Control.CurrentTask = &MYRTOS_idleTask ;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MYRTOS_STARTOS+0x54>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MYRTOS_STARTOS+0x58>)
 8000aa4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate IDLE Task
	MYRTOS_ActivateTask(&MYRTOS_idleTask);
 8000aa8:	4810      	ldr	r0, [pc, #64]	; (8000aec <MYRTOS_STARTOS+0x58>)
 8000aaa:	f7ff ffd5 	bl	8000a58 <MYRTOS_ActivateTask>
	//Start Ticker
	Start_Ticker(); // 1ms
 8000aae:	f7ff fbeb 	bl	8000288 <Start_Ticker>

	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <MYRTOS_STARTOS+0x54>)
 8000ab4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f380 8809 	msr	PSP, r0
	//Switch Thread Mode SP from MSP to PSP
	OS_SWITCH_SP_to_PSP;
 8000ac0:	f3ef 8014 	mrs	r0, CONTROL
 8000ac4:	f04f 0102 	mov.w	r1, #2
 8000ac8:	ea40 0001 	orr.w	r0, r0, r1
 8000acc:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_TO_Unprivilged;
 8000ad0:	f3ef 8314 	mrs	r3, CONTROL
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.p_TaskEntry();
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <MYRTOS_STARTOS+0x58>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	4798      	blx	r3
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000024 	.word	0x20000024
 8000aec:	20000374 	.word	0x20000374

08000af0 <MYRTOS_Update_TasksWaitingTime>:
//				(OS_Control.OSTasks[i]->TimingWaiting) is enabled, decrements the wait ticks count.
//				If the count reaches 1, the task's blocking is disabled and its state is set to Waiting.
//				The function also invokes the MYRTOS_OS_SVC_Set function with the argument SVC_TaskWaitingTime.

void MYRTOS_Update_TasksWaitingTime()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	for (int i =0; i < OS_Control.NoOfActiveTasks ; i++  )
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e031      	b.n	8000b60 <MYRTOS_Update_TasksWaitingTime+0x70>
	{
		if (OS_Control.OSTasks[i]->TaskState == Suspend) //it is blocking until meet the time line
 8000afc:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d126      	bne.n	8000b5a <MYRTOS_Update_TasksWaitingTime+0x6a>
		{
			if (OS_Control.OSTasks[i]->TimingWaiting.Blocking == Enable)
 8000b0c:	4a1a      	ldr	r2, [pc, #104]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d11e      	bne.n	8000b5a <MYRTOS_Update_TasksWaitingTime+0x6a>
			{
				OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count-- ;
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b26:	3a01      	subs	r2, #1
 8000b28:	641a      	str	r2, [r3, #64]	; 0x40
				if (OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count == 1)
 8000b2a:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d110      	bne.n	8000b5a <MYRTOS_Update_TasksWaitingTime+0x6a>
				{
					OS_Control.OSTasks[i]->TimingWaiting.Blocking = Disable ;
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	2201      	movs	r2, #1
 8000b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OSTasks[i]->TaskState = Waiting ;
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4e:	2202      	movs	r2, #2
 8000b50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					MYRTOS_OS_SVC_Set(SVC_TaskWaitingTime);
 8000b54:	2002      	movs	r0, #2
 8000b56:	f7ff ff59 	bl	8000a0c <MYRTOS_OS_SVC_Set>
	for (int i =0; i < OS_Control.NoOfActiveTasks ; i++  )
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000b62:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8c7      	bhi.n	8000afc <MYRTOS_Update_TasksWaitingTime+0xc>
				}
			}
		}
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000024 	.word	0x20000024

08000b7c <MYRTOS_AcquireMutex>:




MYRTOS_errorID MYRTOS_AcquireMutex(Mutex_ref* Mref , Task_ref* Tref)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
	if(Mref->CurrentTUser == NULL) //not used
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <MYRTOS_AcquireMutex+0x1a>
	{
		Mref->CurrentTUser = Tref ;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	e010      	b.n	8000bb8 <MYRTOS_AcquireMutex+0x3c>
	}else
	{
		if(Mref->NextTUser == NULL)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10a      	bne.n	8000bb4 <MYRTOS_AcquireMutex+0x38>
		{
			Mref->NextTUser = Tref ;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	60da      	str	r2, [r3, #12]
			//move to Suspend state until be released
			Tref->TaskState = Suspend ;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			//to be suspended immediately
			MYRTOS_OS_SVC_Set(SVC_terminateTask);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f7ff ff2d 	bl	8000a0c <MYRTOS_OS_SVC_Set>
 8000bb2:	e001      	b.n	8000bb8 <MYRTOS_AcquireMutex+0x3c>
		}else
		{
			return MutexisReacedToMaxNumberOfUsers ;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	e000      	b.n	8000bba <MYRTOS_AcquireMutex+0x3e>
		}

	}
	return NoError ;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <MYRTOS_ReleaseMutex>:
void MYRTOS_ReleaseMutex(Mutex_ref* Mref)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	if(Mref->CurrentTUser != NULL)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00e      	beq.n	8000bf0 <MYRTOS_ReleaseMutex+0x2e>
	{
		Mref->CurrentTUser = Mref->NextTUser  ;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
		Mref->NextTUser  = NULL ;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
		Mref->CurrentTUser->TaskState = Waiting ;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2202      	movs	r2, #2
 8000be6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		MYRTOS_OS_SVC_Set(SVC_Activatetask);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff0e 	bl	8000a0c <MYRTOS_OS_SVC_Set>

	}

}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <task1>:
unsigned char Task1LED,Task2LED,Task3LED,Task4LED ;
Mutex_ref Mutex1 ;
unsigned char payload[3] = {1,2,3} ;

void task1()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	static int Count = 0 ;
	while (1){
		Task1LED ^= 1;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <task1+0x48>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	f083 0301 	eor.w	r3, r3, #1
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <task1+0x48>)
 8000c08:	701a      	strb	r2, [r3, #0]
		Count++ ;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <task1+0x4c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <task1+0x4c>)
 8000c12:	6013      	str	r3, [r2, #0]
		if (Count == 100 )
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <task1+0x4c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b64      	cmp	r3, #100	; 0x64
 8000c1a:	d106      	bne.n	8000c2a <task1+0x32>
		{
			MYRTOS_AcquireMutex(&Mutex1, &Task1);
 8000c1c:	490a      	ldr	r1, [pc, #40]	; (8000c48 <task1+0x50>)
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <task1+0x54>)
 8000c20:	f7ff ffac 	bl	8000b7c <MYRTOS_AcquireMutex>
			MYRTOS_ActivateTask(&Task2);
 8000c24:	480a      	ldr	r0, [pc, #40]	; (8000c50 <task1+0x58>)
 8000c26:	f7ff ff17 	bl	8000a58 <MYRTOS_ActivateTask>
		}
		if (Count == 200 )
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <task1+0x4c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2bc8      	cmp	r3, #200	; 0xc8
 8000c30:	d1e4      	bne.n	8000bfc <task1+0x4>
		{
			Count = 0 ;
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <task1+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
			MYRTOS_ReleaseMutex(&Mutex1);
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <task1+0x54>)
 8000c3a:	f7ff ffc2 	bl	8000bc2 <MYRTOS_ReleaseMutex>
		Task1LED ^= 1;
 8000c3e:	e7dd      	b.n	8000bfc <task1+0x4>
 8000c40:	200004cc 	.word	0x200004cc
 8000c44:	20000500 	.word	0x20000500
 8000c48:	200003bc 	.word	0x200003bc
 8000c4c:	200004d0 	.word	0x200004d0
 8000c50:	20000400 	.word	0x20000400

08000c54 <task2>:
		}
	}
}
void task2()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	static int Count = 0 ;
	while (1){
		Task2LED ^= 1;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <task2+0x40>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	f083 0301 	eor.w	r3, r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <task2+0x40>)
 8000c64:	701a      	strb	r2, [r3, #0]
		Count++ ;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <task2+0x44>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <task2+0x44>)
 8000c6e:	6013      	str	r3, [r2, #0]
		if (Count == 100 )
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <task2+0x44>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b64      	cmp	r3, #100	; 0x64
 8000c76:	d102      	bne.n	8000c7e <task2+0x2a>
		{
			MYRTOS_ActivateTask(&Task3);
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <task2+0x48>)
 8000c7a:	f7ff feed 	bl	8000a58 <MYRTOS_ActivateTask>
		}
		if (Count == 200 )
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <task2+0x44>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2bc8      	cmp	r3, #200	; 0xc8
 8000c84:	d1e8      	bne.n	8000c58 <task2+0x4>
		{
			Count = 0 ;
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <task2+0x44>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
			MYRTOS_TerminateTask(&Task2);
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <task2+0x4c>)
 8000c8e:	f7ff fef2 	bl	8000a76 <MYRTOS_TerminateTask>
		Task2LED ^= 1;
 8000c92:	e7e1      	b.n	8000c58 <task2+0x4>
 8000c94:	200004cd 	.word	0x200004cd
 8000c98:	20000504 	.word	0x20000504
 8000c9c:	20000444 	.word	0x20000444
 8000ca0:	20000400 	.word	0x20000400

08000ca4 <task3>:

		}
	}
}
void task3()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	static int Count = 0 ;
	while (1){
		Task3LED ^= 1;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <task3+0x40>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f083 0301 	eor.w	r3, r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <task3+0x40>)
 8000cb4:	701a      	strb	r2, [r3, #0]
		Count++ ;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <task3+0x44>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <task3+0x44>)
 8000cbe:	6013      	str	r3, [r2, #0]
		if (Count == 100 )
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <task3+0x44>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b64      	cmp	r3, #100	; 0x64
 8000cc6:	d102      	bne.n	8000cce <task3+0x2a>
		{
			MYRTOS_ActivateTask(&Task4);
 8000cc8:	4808      	ldr	r0, [pc, #32]	; (8000cec <task3+0x48>)
 8000cca:	f7ff fec5 	bl	8000a58 <MYRTOS_ActivateTask>
		}
		if (Count == 200 )
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <task3+0x44>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2bc8      	cmp	r3, #200	; 0xc8
 8000cd4:	d1e8      	bne.n	8000ca8 <task3+0x4>
		{
			Count = 0 ;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <task3+0x44>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
			MYRTOS_TerminateTask(&Task3);
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <task3+0x4c>)
 8000cde:	f7ff feca 	bl	8000a76 <MYRTOS_TerminateTask>
		Task3LED ^= 1;
 8000ce2:	e7e1      	b.n	8000ca8 <task3+0x4>
 8000ce4:	200004ce 	.word	0x200004ce
 8000ce8:	20000508 	.word	0x20000508
 8000cec:	20000488 	.word	0x20000488
 8000cf0:	20000444 	.word	0x20000444

08000cf4 <task4>:
		}
	}
}

void task4()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	static int Count = 0 ;
	while (1){
		Task4LED ^= 1;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <task4+0x48>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	f083 0301 	eor.w	r3, r3, #1
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <task4+0x48>)
 8000d04:	701a      	strb	r2, [r3, #0]
		Count++ ;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <task4+0x4c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <task4+0x4c>)
 8000d0e:	6013      	str	r3, [r2, #0]
		if (Count == 3 )
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <task4+0x4c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d103      	bne.n	8000d20 <task4+0x2c>
		{
			MYRTOS_AcquireMutex(&Mutex1, &Task4);
 8000d18:	490a      	ldr	r1, [pc, #40]	; (8000d44 <task4+0x50>)
 8000d1a:	480b      	ldr	r0, [pc, #44]	; (8000d48 <task4+0x54>)
 8000d1c:	f7ff ff2e 	bl	8000b7c <MYRTOS_AcquireMutex>
		}

		if (Count == 200 )
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <task4+0x4c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2bc8      	cmp	r3, #200	; 0xc8
 8000d26:	d1e7      	bne.n	8000cf8 <task4+0x4>
		{
			Count = 0 ;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <task4+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
			MYRTOS_ReleaseMutex(&Mutex1);
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <task4+0x54>)
 8000d30:	f7ff ff47 	bl	8000bc2 <MYRTOS_ReleaseMutex>
			MYRTOS_TerminateTask(&Task4);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <task4+0x50>)
 8000d36:	f7ff fe9e 	bl	8000a76 <MYRTOS_TerminateTask>
		Task4LED ^= 1;
 8000d3a:	e7dd      	b.n	8000cf8 <task4+0x4>
 8000d3c:	200004cf 	.word	0x200004cf
 8000d40:	2000050c 	.word	0x2000050c
 8000d44:	20000488 	.word	0x20000488
 8000d48:	200004d0 	.word	0x200004d0

08000d4c <main>:
		}
	}
}
//priority inversion Example
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

	MYRTOS_errorID error;
	//HW_Init (Initialize ClockTree, RestController)
	HW_Init();
 8000d52:	f7ff fa81 	bl	8000258 <HW_Init>

	if (MYRTOS_init() != NoError)
 8000d56:	f7ff fc63 	bl	8000620 <MYRTOS_init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d000      	beq.n	8000d62 <main+0x16>
		while (1);
 8000d60:	e7fe      	b.n	8000d60 <main+0x14>

	Mutex1.PayloadSize = 3 ;
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <main+0x124>)
 8000d64:	2203      	movs	r2, #3
 8000d66:	605a      	str	r2, [r3, #4]
	Mutex1.Ppayload = payload ;
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <main+0x124>)
 8000d6a:	4a42      	ldr	r2, [pc, #264]	; (8000e74 <main+0x128>)
 8000d6c:	601a      	str	r2, [r3, #0]
	strcpy (Mutex1.MutexName, "Mutex1");
 8000d6e:	4b42      	ldr	r3, [pc, #264]	; (8000e78 <main+0x12c>)
 8000d70:	4a42      	ldr	r2, [pc, #264]	; (8000e7c <main+0x130>)
 8000d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d76:	6018      	str	r0, [r3, #0]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	8019      	strh	r1, [r3, #0]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	0c0a      	lsrs	r2, r1, #16
 8000d80:	701a      	strb	r2, [r3, #0]

	Task1.Stack_Size = 1024 ;
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <main+0x134>)
 8000d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d88:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry =task1;
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <main+0x134>)
 8000d8c:	4a3d      	ldr	r2, [pc, #244]	; (8000e84 <main+0x138>)
 8000d8e:	609a      	str	r2, [r3, #8]
	Task1.priority= 4 ;
 8000d90:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <main+0x134>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	711a      	strb	r2, [r3, #4]
	strcpy (Task1.TaskName, "task_1");
 8000d96:	4b3c      	ldr	r3, [pc, #240]	; (8000e88 <main+0x13c>)
 8000d98:	4a3c      	ldr	r2, [pc, #240]	; (8000e8c <main+0x140>)
 8000d9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9e:	6018      	str	r0, [r3, #0]
 8000da0:	3304      	adds	r3, #4
 8000da2:	8019      	strh	r1, [r3, #0]
 8000da4:	3302      	adds	r3, #2
 8000da6:	0c0a      	lsrs	r2, r1, #16
 8000da8:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size = 1024 ;
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <main+0x144>)
 8000dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db0:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry =task2;
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <main+0x144>)
 8000db4:	4a37      	ldr	r2, [pc, #220]	; (8000e94 <main+0x148>)
 8000db6:	609a      	str	r2, [r3, #8]
	Task2.priority= 3 ;
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <main+0x144>)
 8000dba:	2203      	movs	r2, #3
 8000dbc:	711a      	strb	r2, [r3, #4]
	strcpy (Task2.TaskName, "task_2");
 8000dbe:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <main+0x14c>)
 8000dc0:	4a36      	ldr	r2, [pc, #216]	; (8000e9c <main+0x150>)
 8000dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc6:	6018      	str	r0, [r3, #0]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	8019      	strh	r1, [r3, #0]
 8000dcc:	3302      	adds	r3, #2
 8000dce:	0c0a      	lsrs	r2, r1, #16
 8000dd0:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size = 1024 ;
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <main+0x154>)
 8000dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd8:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry =task3;
 8000dda:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <main+0x154>)
 8000ddc:	4a31      	ldr	r2, [pc, #196]	; (8000ea4 <main+0x158>)
 8000dde:	609a      	str	r2, [r3, #8]
	Task3.priority= 2 ;
 8000de0:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <main+0x154>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	711a      	strb	r2, [r3, #4]
	strcpy (Task3.TaskName, "task_3");
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <main+0x15c>)
 8000de8:	4a30      	ldr	r2, [pc, #192]	; (8000eac <main+0x160>)
 8000dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dee:	6018      	str	r0, [r3, #0]
 8000df0:	3304      	adds	r3, #4
 8000df2:	8019      	strh	r1, [r3, #0]
 8000df4:	3302      	adds	r3, #2
 8000df6:	0c0a      	lsrs	r2, r1, #16
 8000df8:	701a      	strb	r2, [r3, #0]

	Task4.Stack_Size = 1024 ;
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <main+0x164>)
 8000dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e00:	601a      	str	r2, [r3, #0]
	Task4.p_TaskEntry =task4;
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <main+0x164>)
 8000e04:	4a2b      	ldr	r2, [pc, #172]	; (8000eb4 <main+0x168>)
 8000e06:	609a      	str	r2, [r3, #8]
	Task4.priority= 1 ;
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <main+0x164>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	711a      	strb	r2, [r3, #4]
	strcpy (Task4.TaskName, "task_4");
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <main+0x16c>)
 8000e10:	4a2a      	ldr	r2, [pc, #168]	; (8000ebc <main+0x170>)
 8000e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e16:	6018      	str	r0, [r3, #0]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	8019      	strh	r1, [r3, #0]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	0c0a      	lsrs	r2, r1, #16
 8000e20:	701a      	strb	r2, [r3, #0]

	error += MYRTOS_CreateTask(&Task1);
 8000e22:	4817      	ldr	r0, [pc, #92]	; (8000e80 <main+0x134>)
 8000e24:	f7ff fc7c 	bl	8000720 <MYRTOS_CreateTask>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4413      	add	r3, r2
 8000e30:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2);
 8000e32:	4817      	ldr	r0, [pc, #92]	; (8000e90 <main+0x144>)
 8000e34:	f7ff fc74 	bl	8000720 <MYRTOS_CreateTask>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4413      	add	r3, r2
 8000e40:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task3);
 8000e42:	4817      	ldr	r0, [pc, #92]	; (8000ea0 <main+0x154>)
 8000e44:	f7ff fc6c 	bl	8000720 <MYRTOS_CreateTask>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4413      	add	r3, r2
 8000e50:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task4);
 8000e52:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <main+0x164>)
 8000e54:	f7ff fc64 	bl	8000720 <MYRTOS_CreateTask>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4413      	add	r3, r2
 8000e60:	71fb      	strb	r3, [r7, #7]


	MYRTOS_ActivateTask(&Task1);
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <main+0x134>)
 8000e64:	f7ff fdf8 	bl	8000a58 <MYRTOS_ActivateTask>


	MYRTOS_STARTOS() ;
 8000e68:	f7ff fe14 	bl	8000a94 <MYRTOS_STARTOS>

	while (1)
 8000e6c:	e7fe      	b.n	8000e6c <main+0x120>
 8000e6e:	bf00      	nop
 8000e70:	200004d0 	.word	0x200004d0
 8000e74:	20000000 	.word	0x20000000
 8000e78:	200004e0 	.word	0x200004e0
 8000e7c:	080011a0 	.word	0x080011a0
 8000e80:	200003bc 	.word	0x200003bc
 8000e84:	08000bf9 	.word	0x08000bf9
 8000e88:	200003d8 	.word	0x200003d8
 8000e8c:	080011a8 	.word	0x080011a8
 8000e90:	20000400 	.word	0x20000400
 8000e94:	08000c55 	.word	0x08000c55
 8000e98:	2000041c 	.word	0x2000041c
 8000e9c:	080011b0 	.word	0x080011b0
 8000ea0:	20000444 	.word	0x20000444
 8000ea4:	08000ca5 	.word	0x08000ca5
 8000ea8:	20000460 	.word	0x20000460
 8000eac:	080011b8 	.word	0x080011b8
 8000eb0:	20000488 	.word	0x20000488
 8000eb4:	08000cf5 	.word	0x08000cf5
 8000eb8:	200004a4 	.word	0x200004a4
 8000ebc:	080011c0 	.word	0x080011c0

08000ec0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	; (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eee:	f000 f921 	bl	8001134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef2:	f7ff ff2b 	bl	8000d4c <main>

08000ef6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   r0, =_estack
 8000ef8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000f04:	080011d0 	.word	0x080011d0
  ldr r2, =_sbss
 8000f08:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000f0c:	2000054c 	.word	0x2000054c

08000f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_2_IRQHandler>
	...

08000f14 <EXTI0_IRQHandler>:
1: selected trigger request occurred
This bit is set when the selected edge event arrives on the external interrupt line. This bit is
cleared by writing a ‘1’ into the bit.*/

void EXTI0_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	//clear pending flag
	EXTI->PR |= 1<<0;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <EXTI0_IRQHandler+0x1c>)
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <EXTI0_IRQHandler+0x1c>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[0]();
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <EXTI0_IRQHandler+0x20>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4798      	blx	r3
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40010400 	.word	0x40010400
 8000f34:	20000510 	.word	0x20000510

08000f38 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <EXTI1_IRQHandler+0x1c>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <EXTI1_IRQHandler+0x1c>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[1]();
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <EXTI1_IRQHandler+0x20>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4798      	blx	r3
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40010400 	.word	0x40010400
 8000f58:	20000510 	.word	0x20000510

08000f5c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <EXTI2_IRQHandler+0x1c>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <EXTI2_IRQHandler+0x1c>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[2]();
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <EXTI2_IRQHandler+0x20>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4798      	blx	r3
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40010400 	.word	0x40010400
 8000f7c:	20000510 	.word	0x20000510

08000f80 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <EXTI3_IRQHandler+0x1c>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <EXTI3_IRQHandler+0x1c>)
 8000f8a:	f043 0308 	orr.w	r3, r3, #8
 8000f8e:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[3]();
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <EXTI3_IRQHandler+0x20>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	4798      	blx	r3

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40010400 	.word	0x40010400
 8000fa0:	20000510 	.word	0x20000510

08000fa4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <EXTI4_IRQHandler+0x1c>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <EXTI4_IRQHandler+0x1c>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[4]();
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <EXTI4_IRQHandler+0x20>)
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	4798      	blx	r3
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40010400 	.word	0x40010400
 8000fc4:	20000510 	.word	0x20000510

08000fc8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5; GP_IRQ_callBack[5]();}
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	f003 0320 	and.w	r3, r3, #32
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <EXTI9_5_IRQHandler+0x22>
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	4a22      	ldr	r2, [pc, #136]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8000fde:	f043 0320 	orr.w	r3, r3, #32
 8000fe2:	6153      	str	r3, [r2, #20]
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <EXTI9_5_IRQHandler+0xa4>)
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6; GP_IRQ_callBack[6]();}
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d008      	beq.n	8001008 <EXTI9_5_IRQHandler+0x40>
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <EXTI9_5_IRQHandler+0xa4>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7; GP_IRQ_callBack[7]();}
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001010:	2b00      	cmp	r3, #0
 8001012:	d008      	beq.n	8001026 <EXTI9_5_IRQHandler+0x5e>
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 800101a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101e:	6153      	str	r3, [r2, #20]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <EXTI9_5_IRQHandler+0xa4>)
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8; GP_IRQ_callBack[8]();}
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d008      	beq.n	8001044 <EXTI9_5_IRQHandler+0x7c>
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <EXTI9_5_IRQHandler+0xa4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9; GP_IRQ_callBack[9]();}
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <EXTI9_5_IRQHandler+0x9a>
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <EXTI9_5_IRQHandler+0xa0>)
 8001056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105a:	6153      	str	r3, [r2, #20]
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <EXTI9_5_IRQHandler+0xa4>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	4798      	blx	r3

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40010400 	.word	0x40010400
 800106c:	20000510 	.word	0x20000510

08001070 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10; GP_IRQ_callBack[10]();}
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <EXTI15_10_IRQHandler+0x22>
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	4a29      	ldr	r2, [pc, #164]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6153      	str	r3, [r2, #20]
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <EXTI15_10_IRQHandler+0xc0>)
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11; GP_IRQ_callBack[11]();}
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800109a:	2b00      	cmp	r3, #0
 800109c:	d008      	beq.n	80010b0 <EXTI15_10_IRQHandler+0x40>
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a22      	ldr	r2, [pc, #136]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010a8:	6153      	str	r3, [r2, #20]
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <EXTI15_10_IRQHandler+0xc0>)
 80010ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ae:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12; GP_IRQ_callBack[12]();}
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d008      	beq.n	80010ce <EXTI15_10_IRQHandler+0x5e>
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010c6:	6153      	str	r3, [r2, #20]
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <EXTI15_10_IRQHandler+0xc0>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13; GP_IRQ_callBack[13]();}
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <EXTI15_10_IRQHandler+0x7c>
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <EXTI15_10_IRQHandler+0xc0>)
 80010e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ea:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14; GP_IRQ_callBack[14]();}
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <EXTI15_10_IRQHandler+0x9a>
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001102:	6153      	str	r3, [r2, #20]
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <EXTI15_10_IRQHandler+0xc0>)
 8001106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001108:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15; GP_IRQ_callBack[15]();}
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d008      	beq.n	8001128 <EXTI15_10_IRQHandler+0xb8>
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <EXTI15_10_IRQHandler+0xbc>)
 800111c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001120:	6153      	str	r3, [r2, #20]
 8001122:	4b03      	ldr	r3, [pc, #12]	; (8001130 <EXTI15_10_IRQHandler+0xc0>)
 8001124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001126:	4798      	blx	r3

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40010400 	.word	0x40010400
 8001130:	20000510 	.word	0x20000510

08001134 <__libc_init_array>:
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	2600      	movs	r6, #0
 8001138:	4d0c      	ldr	r5, [pc, #48]	; (800116c <__libc_init_array+0x38>)
 800113a:	4c0d      	ldr	r4, [pc, #52]	; (8001170 <__libc_init_array+0x3c>)
 800113c:	1b64      	subs	r4, r4, r5
 800113e:	10a4      	asrs	r4, r4, #2
 8001140:	42a6      	cmp	r6, r4
 8001142:	d109      	bne.n	8001158 <__libc_init_array+0x24>
 8001144:	f000 f81a 	bl	800117c <_init>
 8001148:	2600      	movs	r6, #0
 800114a:	4d0a      	ldr	r5, [pc, #40]	; (8001174 <__libc_init_array+0x40>)
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <__libc_init_array+0x44>)
 800114e:	1b64      	subs	r4, r4, r5
 8001150:	10a4      	asrs	r4, r4, #2
 8001152:	42a6      	cmp	r6, r4
 8001154:	d105      	bne.n	8001162 <__libc_init_array+0x2e>
 8001156:	bd70      	pop	{r4, r5, r6, pc}
 8001158:	f855 3b04 	ldr.w	r3, [r5], #4
 800115c:	4798      	blx	r3
 800115e:	3601      	adds	r6, #1
 8001160:	e7ee      	b.n	8001140 <__libc_init_array+0xc>
 8001162:	f855 3b04 	ldr.w	r3, [r5], #4
 8001166:	4798      	blx	r3
 8001168:	3601      	adds	r6, #1
 800116a:	e7f2      	b.n	8001152 <__libc_init_array+0x1e>
 800116c:	080011c8 	.word	0x080011c8
 8001170:	080011c8 	.word	0x080011c8
 8001174:	080011c8 	.word	0x080011c8
 8001178:	080011cc 	.word	0x080011cc

0800117c <_init>:
 800117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117e:	bf00      	nop
 8001180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001182:	bc08      	pop	{r3}
 8001184:	469e      	mov	lr, r3
 8001186:	4770      	bx	lr

08001188 <_fini>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	bf00      	nop
 800118c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800118e:	bc08      	pop	{r3}
 8001190:	469e      	mov	lr, r3
 8001192:	4770      	bx	lr
