
Smart_VehicleParking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f90  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080020c0  080020c0  000120c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021dc  080021dc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080021dc  080021dc  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021dc  080021dc  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021dc  080021dc  000121dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080021e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000003c  08002220  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002220  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025f9  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c3d  00000000  00000000  0002265e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001146  00000000  00000000  0002329b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002f0  00000000  00000000  000243e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000258  00000000  00000000  000246d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002fc3  00000000  00000000  00024930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000496b  00000000  00000000  000278f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a1df  00000000  00000000  0002c25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003643d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000091c  00000000  00000000  00036490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000003c 	.word	0x2000003c
 800014c:	00000000 	.word	0x00000000
 8000150:	080020a8 	.word	0x080020a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000040 	.word	0x20000040
 800016c:	080020a8 	.word	0x080020a8

08000170 <keypad_Init>:


#include "keypad.h"

void keypad_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	GPIO_PIN_CONFIG_T PinCinfg;

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_0;
 8000176:	2301      	movs	r3, #1
 8000178:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800017a:	2302      	movs	r3, #2
 800017c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	4619      	mov	r1, r3
 8000182:	4821      	ldr	r0, [pc, #132]	; (8000208 <keypad_Init+0x98>)
 8000184:	f000 ff54 	bl	8001030 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_1;
 8000188:	2302      	movs	r3, #2
 800018a:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800018c:	2302      	movs	r3, #2
 800018e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	4619      	mov	r1, r3
 8000194:	481c      	ldr	r0, [pc, #112]	; (8000208 <keypad_Init+0x98>)
 8000196:	f000 ff4b 	bl	8001030 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_3;
 800019a:	2308      	movs	r3, #8
 800019c:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800019e:	2302      	movs	r3, #2
 80001a0:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	4619      	mov	r1, r3
 80001a6:	4818      	ldr	r0, [pc, #96]	; (8000208 <keypad_Init+0x98>)
 80001a8:	f000 ff42 	bl	8001030 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_4;
 80001ac:	2310      	movs	r3, #16
 80001ae:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80001b0:	2302      	movs	r3, #2
 80001b2:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	4813      	ldr	r0, [pc, #76]	; (8000208 <keypad_Init+0x98>)
 80001ba:	f000 ff39 	bl	8001030 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_5;
 80001be:	2320      	movs	r3, #32
 80001c0:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001c2:	2304      	movs	r3, #4
 80001c4:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 80001c6:	2301      	movs	r3, #1
 80001c8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	4619      	mov	r1, r3
 80001ce:	480e      	ldr	r0, [pc, #56]	; (8000208 <keypad_Init+0x98>)
 80001d0:	f000 ff2e 	bl	8001030 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_6;
 80001d4:	2340      	movs	r3, #64	; 0x40
 80001d6:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d8:	2304      	movs	r3, #4
 80001da:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 80001dc:	2301      	movs	r3, #1
 80001de:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	4619      	mov	r1, r3
 80001e4:	4808      	ldr	r0, [pc, #32]	; (8000208 <keypad_Init+0x98>)
 80001e6:	f000 ff23 	bl	8001030 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_7;
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ee:	2304      	movs	r3, #4
 80001f0:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 80001f2:	2301      	movs	r3, #1
 80001f4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4619      	mov	r1, r3
 80001fa:	4803      	ldr	r0, [pc, #12]	; (8000208 <keypad_Init+0x98>)
 80001fc:	f000 ff18 	bl	8001030 <MCAL_GPIO_Init>

}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40010c00 	.word	0x40010c00

0800020c <keypad_Read>:

char keypad_Read(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePort(GPIOB, 0x0020);// Make Pin B5 High
 8000210:	2120      	movs	r1, #32
 8000212:	4843      	ldr	r0, [pc, #268]	; (8000320 <keypad_Read+0x114>)
 8000214:	f000 ffac 	bl	8001170 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '*';
 8000218:	4841      	ldr	r0, [pc, #260]	; (8000320 <keypad_Read+0x114>)
 800021a:	f000 ff9c 	bl	8001156 <MCAL_GPIO_ReadPort>
 800021e:	4603      	mov	r3, r0
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <keypad_Read+0x20>
 8000228:	232a      	movs	r3, #42	; 0x2a
 800022a:	e076      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '7';
 800022c:	483c      	ldr	r0, [pc, #240]	; (8000320 <keypad_Read+0x114>)
 800022e:	f000 ff92 	bl	8001156 <MCAL_GPIO_ReadPort>
 8000232:	4603      	mov	r3, r0
 8000234:	f003 0302 	and.w	r3, r3, #2
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <keypad_Read+0x34>
 800023c:	2337      	movs	r3, #55	; 0x37
 800023e:	e06c      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '4';
 8000240:	4837      	ldr	r0, [pc, #220]	; (8000320 <keypad_Read+0x114>)
 8000242:	f000 ff88 	bl	8001156 <MCAL_GPIO_ReadPort>
 8000246:	4603      	mov	r3, r0
 8000248:	f003 0308 	and.w	r3, r3, #8
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <keypad_Read+0x48>
 8000250:	2334      	movs	r3, #52	; 0x34
 8000252:	e062      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '1';
 8000254:	4832      	ldr	r0, [pc, #200]	; (8000320 <keypad_Read+0x114>)
 8000256:	f000 ff7e 	bl	8001156 <MCAL_GPIO_ReadPort>
 800025a:	4603      	mov	r3, r0
 800025c:	f003 0310 	and.w	r3, r3, #16
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <keypad_Read+0x5c>
 8000264:	2331      	movs	r3, #49	; 0x31
 8000266:	e058      	b.n	800031a <keypad_Read+0x10e>


	MCAL_GPIO_WritePort(GPIOB, 0x0040); // Make Pin B6 High
 8000268:	2140      	movs	r1, #64	; 0x40
 800026a:	482d      	ldr	r0, [pc, #180]	; (8000320 <keypad_Read+0x114>)
 800026c:	f000 ff80 	bl	8001170 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '0';
 8000270:	482b      	ldr	r0, [pc, #172]	; (8000320 <keypad_Read+0x114>)
 8000272:	f000 ff70 	bl	8001156 <MCAL_GPIO_ReadPort>
 8000276:	4603      	mov	r3, r0
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <keypad_Read+0x78>
 8000280:	2330      	movs	r3, #48	; 0x30
 8000282:	e04a      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '8';
 8000284:	4826      	ldr	r0, [pc, #152]	; (8000320 <keypad_Read+0x114>)
 8000286:	f000 ff66 	bl	8001156 <MCAL_GPIO_ReadPort>
 800028a:	4603      	mov	r3, r0
 800028c:	f003 0302 	and.w	r3, r3, #2
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <keypad_Read+0x8c>
 8000294:	2338      	movs	r3, #56	; 0x38
 8000296:	e040      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '5';
 8000298:	4821      	ldr	r0, [pc, #132]	; (8000320 <keypad_Read+0x114>)
 800029a:	f000 ff5c 	bl	8001156 <MCAL_GPIO_ReadPort>
 800029e:	4603      	mov	r3, r0
 80002a0:	f003 0308 	and.w	r3, r3, #8
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <keypad_Read+0xa0>
 80002a8:	2335      	movs	r3, #53	; 0x35
 80002aa:	e036      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '2';
 80002ac:	481c      	ldr	r0, [pc, #112]	; (8000320 <keypad_Read+0x114>)
 80002ae:	f000 ff52 	bl	8001156 <MCAL_GPIO_ReadPort>
 80002b2:	4603      	mov	r3, r0
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <keypad_Read+0xb4>
 80002bc:	2332      	movs	r3, #50	; 0x32
 80002be:	e02c      	b.n	800031a <keypad_Read+0x10e>

	MCAL_GPIO_WritePort(GPIOB, 0x0080); // Make Pin B7 High
 80002c0:	2180      	movs	r1, #128	; 0x80
 80002c2:	4817      	ldr	r0, [pc, #92]	; (8000320 <keypad_Read+0x114>)
 80002c4:	f000 ff54 	bl	8001170 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '#';
 80002c8:	4815      	ldr	r0, [pc, #84]	; (8000320 <keypad_Read+0x114>)
 80002ca:	f000 ff44 	bl	8001156 <MCAL_GPIO_ReadPort>
 80002ce:	4603      	mov	r3, r0
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <keypad_Read+0xd0>
 80002d8:	2323      	movs	r3, #35	; 0x23
 80002da:	e01e      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '9';
 80002dc:	4810      	ldr	r0, [pc, #64]	; (8000320 <keypad_Read+0x114>)
 80002de:	f000 ff3a 	bl	8001156 <MCAL_GPIO_ReadPort>
 80002e2:	4603      	mov	r3, r0
 80002e4:	f003 0302 	and.w	r3, r3, #2
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <keypad_Read+0xe4>
 80002ec:	2339      	movs	r3, #57	; 0x39
 80002ee:	e014      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '6';
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <keypad_Read+0x114>)
 80002f2:	f000 ff30 	bl	8001156 <MCAL_GPIO_ReadPort>
 80002f6:	4603      	mov	r3, r0
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <keypad_Read+0xf8>
 8000300:	2336      	movs	r3, #54	; 0x36
 8000302:	e00a      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '3';
 8000304:	4806      	ldr	r0, [pc, #24]	; (8000320 <keypad_Read+0x114>)
 8000306:	f000 ff26 	bl	8001156 <MCAL_GPIO_ReadPort>
 800030a:	4603      	mov	r3, r0
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <keypad_Read+0x10c>
 8000314:	2333      	movs	r3, #51	; 0x33
 8000316:	e000      	b.n	800031a <keypad_Read+0x10e>


	return 'N';
 8000318:	234e      	movs	r3, #78	; 0x4e
}
 800031a:	4618      	mov	r0, r3
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010c00 	.word	0x40010c00

08000324 <delay_ms>:
GPIO_PIN_CONFIG_T pin_cfg;
uint16_t LCD_data_pins[] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,
							GPIO_PIN_12,GPIO_PIN_13,GPIO_PIN_14,GPIO_PIN_15};

void delay_ms(uint32_t time)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0; i<time; i++)
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	e00b      	b.n	800034a <delay_ms+0x26>
		for(j=0; j<255; j++);
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	e002      	b.n	800033e <delay_ms+0x1a>
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	3301      	adds	r3, #1
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	2bfe      	cmp	r3, #254	; 0xfe
 8000342:	d9f9      	bls.n	8000338 <delay_ms+0x14>
	for(i=0; i<time; i++)
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3301      	adds	r3, #1
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	429a      	cmp	r2, r3
 8000350:	d3ef      	bcc.n	8000332 <delay_ms+0xe>
}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
	...

08000360 <lcd_init>:

void lcd_init(LCD_Pins_Config_t * Lcd_No)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	//delay_ms(20);
	dms(10);
 8000368:	200a      	movs	r0, #10
 800036a:	f000 ffd5 	bl	8001318 <dms>
	//LCD data set as output
	int i;
	if(Lcd_No == &LCD1)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a86      	ldr	r2, [pc, #536]	; (800058c <lcd_init+0x22c>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d15d      	bne.n	8000432 <lcd_init+0xd2>
	{
		for(i=4; i<8; i++)
 8000376:	2304      	movs	r3, #4
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	e014      	b.n	80003a6 <lcd_init+0x46>
		{
			pin_cfg.GPIO_PIN_NUMBER= LCD_data_pins[i];
 800037c:	4a84      	ldr	r2, [pc, #528]	; (8000590 <lcd_init+0x230>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000384:	4b83      	ldr	r3, [pc, #524]	; (8000594 <lcd_init+0x234>)
 8000386:	801a      	strh	r2, [r3, #0]
			pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000388:	4b82      	ldr	r3, [pc, #520]	; (8000594 <lcd_init+0x234>)
 800038a:	2204      	movs	r2, #4
 800038c:	709a      	strb	r2, [r3, #2]
			pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 800038e:	4b81      	ldr	r3, [pc, #516]	; (8000594 <lcd_init+0x234>)
 8000390:	2201      	movs	r2, #1
 8000392:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_Init(LCD1.lcd_data_dir, &pin_cfg);
 8000394:	4b7d      	ldr	r3, [pc, #500]	; (800058c <lcd_init+0x22c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	497e      	ldr	r1, [pc, #504]	; (8000594 <lcd_init+0x234>)
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fe48 	bl	8001030 <MCAL_GPIO_Init>
		for(i=4; i<8; i++)
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	2b07      	cmp	r3, #7
 80003aa:	dde7      	ble.n	800037c <lcd_init+0x1c>
		}

		//set RS SWITCH as output
		pin_cfg.GPIO_PIN_NUMBER = LCD1.RS;
 80003ac:	4b77      	ldr	r3, [pc, #476]	; (800058c <lcd_init+0x22c>)
 80003ae:	8a1a      	ldrh	r2, [r3, #16]
 80003b0:	4b78      	ldr	r3, [pc, #480]	; (8000594 <lcd_init+0x234>)
 80003b2:	801a      	strh	r2, [r3, #0]
		pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003b4:	4b77      	ldr	r3, [pc, #476]	; (8000594 <lcd_init+0x234>)
 80003b6:	2204      	movs	r2, #4
 80003b8:	709a      	strb	r2, [r3, #2]
		pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80003ba:	4b76      	ldr	r3, [pc, #472]	; (8000594 <lcd_init+0x234>)
 80003bc:	2201      	movs	r2, #1
 80003be:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD1.lcd_ctrl_dir, &pin_cfg);
 80003c0:	4b72      	ldr	r3, [pc, #456]	; (800058c <lcd_init+0x22c>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	4973      	ldr	r1, [pc, #460]	; (8000594 <lcd_init+0x234>)
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 fe32 	bl	8001030 <MCAL_GPIO_Init>
		//set ENABLE SWITCH as output
		pin_cfg.GPIO_PIN_NUMBER = LCD1.EN;
 80003cc:	4b6f      	ldr	r3, [pc, #444]	; (800058c <lcd_init+0x22c>)
 80003ce:	8a5a      	ldrh	r2, [r3, #18]
 80003d0:	4b70      	ldr	r3, [pc, #448]	; (8000594 <lcd_init+0x234>)
 80003d2:	801a      	strh	r2, [r3, #0]
		pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003d4:	4b6f      	ldr	r3, [pc, #444]	; (8000594 <lcd_init+0x234>)
 80003d6:	2204      	movs	r2, #4
 80003d8:	709a      	strb	r2, [r3, #2]
		pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80003da:	4b6e      	ldr	r3, [pc, #440]	; (8000594 <lcd_init+0x234>)
 80003dc:	2201      	movs	r2, #1
 80003de:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD1.lcd_ctrl_dir, &pin_cfg);
 80003e0:	4b6a      	ldr	r3, [pc, #424]	; (800058c <lcd_init+0x22c>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	496b      	ldr	r1, [pc, #428]	; (8000594 <lcd_init+0x234>)
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fe22 	bl	8001030 <MCAL_GPIO_Init>
		//clear RS,RW,EN
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.RS, GPIO_PIN_RESET);
 80003ec:	4b67      	ldr	r3, [pc, #412]	; (800058c <lcd_init+0x22c>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	4a66      	ldr	r2, [pc, #408]	; (800058c <lcd_init+0x22c>)
 80003f2:	8a11      	ldrh	r1, [r2, #16]
 80003f4:	2200      	movs	r2, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fec8 	bl	800118c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.EN, GPIO_PIN_RESET);
 80003fc:	4b63      	ldr	r3, [pc, #396]	; (800058c <lcd_init+0x22c>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	4a62      	ldr	r2, [pc, #392]	; (800058c <lcd_init+0x22c>)
 8000402:	8a51      	ldrh	r1, [r2, #18]
 8000404:	2200      	movs	r2, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f000 fec0 	bl	800118c <MCAL_GPIO_WritePin>

		lcd_send_command(&LCD1,0x30);
 800040c:	2130      	movs	r1, #48	; 0x30
 800040e:	485f      	ldr	r0, [pc, #380]	; (800058c <lcd_init+0x22c>)
 8000410:	f000 fa2a 	bl	8000868 <lcd_send_command>
		delay_ms(10);
 8000414:	200a      	movs	r0, #10
 8000416:	f7ff ff85 	bl	8000324 <delay_ms>
		lcd_send_command(&LCD1,0x30);
 800041a:	2130      	movs	r1, #48	; 0x30
 800041c:	485b      	ldr	r0, [pc, #364]	; (800058c <lcd_init+0x22c>)
 800041e:	f000 fa23 	bl	8000868 <lcd_send_command>
		delay_ms(1);
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ff7e 	bl	8000324 <delay_ms>
		lcd_send_command(&LCD1,0x30);
 8000428:	2130      	movs	r1, #48	; 0x30
 800042a:	4858      	ldr	r0, [pc, #352]	; (800058c <lcd_init+0x22c>)
 800042c:	f000 fa1c 	bl	8000868 <lcd_send_command>
 8000430:	e060      	b.n	80004f4 <lcd_init+0x194>
	}
	else if(Lcd_No == &LCD2)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a58      	ldr	r2, [pc, #352]	; (8000598 <lcd_init+0x238>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d15c      	bne.n	80004f4 <lcd_init+0x194>
	{
		for(i=4; i<8; i++)
 800043a:	2304      	movs	r3, #4
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	e014      	b.n	800046a <lcd_init+0x10a>
		{
			pin_cfg.GPIO_PIN_NUMBER= LCD_data_pins[i];
 8000440:	4a53      	ldr	r2, [pc, #332]	; (8000590 <lcd_init+0x230>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000448:	4b52      	ldr	r3, [pc, #328]	; (8000594 <lcd_init+0x234>)
 800044a:	801a      	strh	r2, [r3, #0]
			pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800044c:	4b51      	ldr	r3, [pc, #324]	; (8000594 <lcd_init+0x234>)
 800044e:	2204      	movs	r2, #4
 8000450:	709a      	strb	r2, [r3, #2]
			pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000452:	4b50      	ldr	r3, [pc, #320]	; (8000594 <lcd_init+0x234>)
 8000454:	2201      	movs	r2, #1
 8000456:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_Init(LCD2.lcd_data_dir, &pin_cfg);
 8000458:	4b4f      	ldr	r3, [pc, #316]	; (8000598 <lcd_init+0x238>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	494d      	ldr	r1, [pc, #308]	; (8000594 <lcd_init+0x234>)
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fde6 	bl	8001030 <MCAL_GPIO_Init>
		for(i=4; i<8; i++)
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3301      	adds	r3, #1
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2b07      	cmp	r3, #7
 800046e:	dde7      	ble.n	8000440 <lcd_init+0xe0>
		}

		//set RS SWITCH as output
		pin_cfg.GPIO_PIN_NUMBER = LCD2.RS;
 8000470:	4b49      	ldr	r3, [pc, #292]	; (8000598 <lcd_init+0x238>)
 8000472:	8a1a      	ldrh	r2, [r3, #16]
 8000474:	4b47      	ldr	r3, [pc, #284]	; (8000594 <lcd_init+0x234>)
 8000476:	801a      	strh	r2, [r3, #0]
		pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000478:	4b46      	ldr	r3, [pc, #280]	; (8000594 <lcd_init+0x234>)
 800047a:	2204      	movs	r2, #4
 800047c:	709a      	strb	r2, [r3, #2]
		pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 800047e:	4b45      	ldr	r3, [pc, #276]	; (8000594 <lcd_init+0x234>)
 8000480:	2201      	movs	r2, #1
 8000482:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD2.lcd_ctrl_dir, &pin_cfg);
 8000484:	4b44      	ldr	r3, [pc, #272]	; (8000598 <lcd_init+0x238>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4942      	ldr	r1, [pc, #264]	; (8000594 <lcd_init+0x234>)
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fdd0 	bl	8001030 <MCAL_GPIO_Init>
		//set ENABLE SWITCH as output
		pin_cfg.GPIO_PIN_NUMBER = LCD2.EN;
 8000490:	4b41      	ldr	r3, [pc, #260]	; (8000598 <lcd_init+0x238>)
 8000492:	8a5a      	ldrh	r2, [r3, #18]
 8000494:	4b3f      	ldr	r3, [pc, #252]	; (8000594 <lcd_init+0x234>)
 8000496:	801a      	strh	r2, [r3, #0]
		pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000498:	4b3e      	ldr	r3, [pc, #248]	; (8000594 <lcd_init+0x234>)
 800049a:	2204      	movs	r2, #4
 800049c:	709a      	strb	r2, [r3, #2]
		pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 800049e:	4b3d      	ldr	r3, [pc, #244]	; (8000594 <lcd_init+0x234>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD2.lcd_ctrl_dir, &pin_cfg);
 80004a4:	4b3c      	ldr	r3, [pc, #240]	; (8000598 <lcd_init+0x238>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	493a      	ldr	r1, [pc, #232]	; (8000594 <lcd_init+0x234>)
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fdc0 	bl	8001030 <MCAL_GPIO_Init>
		//clear RS,RW,EN
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.RS, GPIO_PIN_RESET);
 80004b0:	4b39      	ldr	r3, [pc, #228]	; (8000598 <lcd_init+0x238>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a38      	ldr	r2, [pc, #224]	; (8000598 <lcd_init+0x238>)
 80004b6:	8a11      	ldrh	r1, [r2, #16]
 80004b8:	2200      	movs	r2, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fe66 	bl	800118c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.EN, GPIO_PIN_RESET);
 80004c0:	4b35      	ldr	r3, [pc, #212]	; (8000598 <lcd_init+0x238>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	4a34      	ldr	r2, [pc, #208]	; (8000598 <lcd_init+0x238>)
 80004c6:	8a51      	ldrh	r1, [r2, #18]
 80004c8:	2200      	movs	r2, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fe5e 	bl	800118c <MCAL_GPIO_WritePin>

		lcd_send_command(&LCD2,0x30);
 80004d0:	2130      	movs	r1, #48	; 0x30
 80004d2:	4831      	ldr	r0, [pc, #196]	; (8000598 <lcd_init+0x238>)
 80004d4:	f000 f9c8 	bl	8000868 <lcd_send_command>
		delay_ms(10);
 80004d8:	200a      	movs	r0, #10
 80004da:	f7ff ff23 	bl	8000324 <delay_ms>
		lcd_send_command(&LCD2,0x30);
 80004de:	2130      	movs	r1, #48	; 0x30
 80004e0:	482d      	ldr	r0, [pc, #180]	; (8000598 <lcd_init+0x238>)
 80004e2:	f000 f9c1 	bl	8000868 <lcd_send_command>
		delay_ms(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f7ff ff1c 	bl	8000324 <delay_ms>
		lcd_send_command(&LCD2,0x30);
 80004ec:	2130      	movs	r1, #48	; 0x30
 80004ee:	482a      	ldr	r0, [pc, #168]	; (8000598 <lcd_init+0x238>)
 80004f0:	f000 f9ba 	bl	8000868 <lcd_send_command>
	lcd_write_command(function_set_8bit);
#endif

#ifdef FOUR_BIT_MODE
	//select 4-bit mode
	if(Lcd_No == &LCD1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a25      	ldr	r2, [pc, #148]	; (800058c <lcd_init+0x22c>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d10c      	bne.n	8000516 <lcd_init+0x1b6>
	{
		lcd_send_command(&LCD1,0x02);
 80004fc:	2102      	movs	r1, #2
 80004fe:	4823      	ldr	r0, [pc, #140]	; (800058c <lcd_init+0x22c>)
 8000500:	f000 f9b2 	bl	8000868 <lcd_send_command>
		lcd_send_command(&LCD1,function_set_4bit);
 8000504:	2128      	movs	r1, #40	; 0x28
 8000506:	4821      	ldr	r0, [pc, #132]	; (800058c <lcd_init+0x22c>)
 8000508:	f000 f9ae 	bl	8000868 <lcd_send_command>
		lcd_send_command(&LCD1,0x08);
 800050c:	2108      	movs	r1, #8
 800050e:	481f      	ldr	r0, [pc, #124]	; (800058c <lcd_init+0x22c>)
 8000510:	f000 f9aa 	bl	8000868 <lcd_send_command>
 8000514:	e00f      	b.n	8000536 <lcd_init+0x1d6>
	}
	else if(Lcd_No == &LCD2)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a1f      	ldr	r2, [pc, #124]	; (8000598 <lcd_init+0x238>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d10b      	bne.n	8000536 <lcd_init+0x1d6>
	{
		lcd_send_command(&LCD2,0x02);
 800051e:	2102      	movs	r1, #2
 8000520:	481d      	ldr	r0, [pc, #116]	; (8000598 <lcd_init+0x238>)
 8000522:	f000 f9a1 	bl	8000868 <lcd_send_command>
		lcd_send_command(&LCD2,function_set_4bit);
 8000526:	2128      	movs	r1, #40	; 0x28
 8000528:	481b      	ldr	r0, [pc, #108]	; (8000598 <lcd_init+0x238>)
 800052a:	f000 f99d 	bl	8000868 <lcd_send_command>
		lcd_send_command(&LCD2,0x08);
 800052e:	2108      	movs	r1, #8
 8000530:	4819      	ldr	r0, [pc, #100]	; (8000598 <lcd_init+0x238>)
 8000532:	f000 f999 	bl	8000868 <lcd_send_command>
	}

#endif
	if(Lcd_No == &LCD1)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <lcd_init+0x22c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d10f      	bne.n	800055e <lcd_init+0x1fe>
	{
		//display off
		lcd_send_command(&LCD1,display_off_cursor_off);
 800053e:	2108      	movs	r1, #8
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <lcd_init+0x22c>)
 8000542:	f000 f991 	bl	8000868 <lcd_send_command>
		//clear display
		lcd_clear(&LCD1);
 8000546:	4811      	ldr	r0, [pc, #68]	; (800058c <lcd_init+0x22c>)
 8000548:	f000 fafc 	bl	8000b44 <lcd_clear>
		//entry mode set
		lcd_send_command(&LCD1,Entry_mode);
 800054c:	2106      	movs	r1, #6
 800054e:	480f      	ldr	r0, [pc, #60]	; (800058c <lcd_init+0x22c>)
 8000550:	f000 f98a 	bl	8000868 <lcd_send_command>
		//display on cursor blinking
		lcd_send_command(&LCD1,Display_on_Cursor_blinking);
 8000554:	210f      	movs	r1, #15
 8000556:	480d      	ldr	r0, [pc, #52]	; (800058c <lcd_init+0x22c>)
 8000558:	f000 f986 	bl	8000868 <lcd_send_command>
		lcd_send_command(&LCD2,Entry_mode);
		//display on cursor blinking
		lcd_send_command(&LCD2,Display_on_Cursor_blinking);
	}

}
 800055c:	e012      	b.n	8000584 <lcd_init+0x224>
	else if(Lcd_No == &LCD2)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <lcd_init+0x238>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d10e      	bne.n	8000584 <lcd_init+0x224>
		lcd_send_command(&LCD2,display_off_cursor_off);
 8000566:	2108      	movs	r1, #8
 8000568:	480b      	ldr	r0, [pc, #44]	; (8000598 <lcd_init+0x238>)
 800056a:	f000 f97d 	bl	8000868 <lcd_send_command>
		lcd_clear(&LCD2);
 800056e:	480a      	ldr	r0, [pc, #40]	; (8000598 <lcd_init+0x238>)
 8000570:	f000 fae8 	bl	8000b44 <lcd_clear>
		lcd_send_command(&LCD2,Entry_mode);
 8000574:	2106      	movs	r1, #6
 8000576:	4808      	ldr	r0, [pc, #32]	; (8000598 <lcd_init+0x238>)
 8000578:	f000 f976 	bl	8000868 <lcd_send_command>
		lcd_send_command(&LCD2,Display_on_Cursor_blinking);
 800057c:	210f      	movs	r1, #15
 800057e:	4806      	ldr	r0, [pc, #24]	; (8000598 <lcd_init+0x238>)
 8000580:	f000 f972 	bl	8000868 <lcd_send_command>
}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000014 	.word	0x20000014
 8000590:	20000000 	.word	0x20000000
 8000594:	20000058 	.word	0x20000058
 8000598:	20000028 	.word	0x20000028

0800059c <lcd_kick>:


void lcd_kick(LCD_Pins_Config_t * Lcd_No)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	if(Lcd_No == &LCD1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a19      	ldr	r2, [pc, #100]	; (800060c <lcd_kick+0x70>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d113      	bne.n	80005d4 <lcd_kick+0x38>
	{
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.EN, GPIO_PIN_SET);
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <lcd_kick+0x70>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	4a16      	ldr	r2, [pc, #88]	; (800060c <lcd_kick+0x70>)
 80005b2:	8a51      	ldrh	r1, [r2, #18]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fde8 	bl	800118c <MCAL_GPIO_WritePin>
		//delay_ms(3);
		dms(2);
 80005bc:	2002      	movs	r0, #2
 80005be:	f000 feab 	bl	8001318 <dms>
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.EN, GPIO_PIN_RESET);
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <lcd_kick+0x70>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <lcd_kick+0x70>)
 80005c8:	8a51      	ldrh	r1, [r2, #18]
 80005ca:	2200      	movs	r2, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fddd 	bl	800118c <MCAL_GPIO_WritePin>
		//delay_ms(3);
		dms(2);
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.EN, GPIO_PIN_RESET);
	}

}
 80005d2:	e016      	b.n	8000602 <lcd_kick+0x66>
	else if(Lcd_No == &LCD2)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <lcd_kick+0x74>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d112      	bne.n	8000602 <lcd_kick+0x66>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.EN, GPIO_PIN_SET);
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <lcd_kick+0x74>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <lcd_kick+0x74>)
 80005e2:	8a51      	ldrh	r1, [r2, #18]
 80005e4:	2201      	movs	r2, #1
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fdd0 	bl	800118c <MCAL_GPIO_WritePin>
		dms(2);
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 fe93 	bl	8001318 <dms>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.EN, GPIO_PIN_RESET);
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <lcd_kick+0x74>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <lcd_kick+0x74>)
 80005f8:	8a51      	ldrh	r1, [r2, #18]
 80005fa:	2200      	movs	r2, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fdc5 	bl	800118c <MCAL_GPIO_WritePin>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000014 	.word	0x20000014
 8000610:	20000028 	.word	0x20000028

08000614 <lcd_send_char>:

void lcd_send_char(LCD_Pins_Config_t * Lcd_No,unsigned char data)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
#endif

#ifdef FOUR_BIT_MODE
	//lcd_is_busy();
	//delay_ms(3);
	dms(2);
 8000620:	2002      	movs	r0, #2
 8000622:	f000 fe79 	bl	8001318 <dms>
	if(Lcd_No == &LCD1)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a5a      	ldr	r2, [pc, #360]	; (8000794 <lcd_send_char+0x180>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d155      	bne.n	80006da <lcd_send_char+0xc6>
	{
		//send last four bits of data
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.RS, GPIO_PIN_SET);
 800062e:	4b59      	ldr	r3, [pc, #356]	; (8000794 <lcd_send_char+0x180>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	4a58      	ldr	r2, [pc, #352]	; (8000794 <lcd_send_char+0x180>)
 8000634:	8a11      	ldrh	r1, [r2, #16]
 8000636:	2201      	movs	r2, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fda7 	bl	800118c <MCAL_GPIO_WritePin>
		unsigned char tmp_data = (data & 0xF0);
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	f023 030f 	bic.w	r3, r3, #15
 8000644:	73bb      	strb	r3, [r7, #14]
		int i;
		for(i=4; i<8; i++)
 8000646:	2304      	movs	r3, #4
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	e015      	b.n	8000678 <lcd_send_char+0x64>
		{
			MCAL_GPIO_WritePin(LCD1.lcd_data_port, LCD_data_pins[i], ((tmp_data & (1<<i))>>i));
 800064c:	4b51      	ldr	r3, [pc, #324]	; (8000794 <lcd_send_char+0x180>)
 800064e:	6858      	ldr	r0, [r3, #4]
 8000650:	4a51      	ldr	r2, [pc, #324]	; (8000798 <lcd_send_char+0x184>)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000658:	7bba      	ldrb	r2, [r7, #14]
 800065a:	2401      	movs	r4, #1
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	fa04 f303 	lsl.w	r3, r4, r3
 8000662:	401a      	ands	r2, r3
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	fa42 f303 	asr.w	r3, r2, r3
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	f000 fd8d 	bl	800118c <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b07      	cmp	r3, #7
 800067c:	dde6      	ble.n	800064c <lcd_send_char+0x38>
		}
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_data);
		lcd_kick(&LCD1);
 800067e:	4845      	ldr	r0, [pc, #276]	; (8000794 <lcd_send_char+0x180>)
 8000680:	f7ff ff8c 	bl	800059c <lcd_kick>
		//send first four bits of data
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.RS, GPIO_PIN_SET);
 8000684:	4b43      	ldr	r3, [pc, #268]	; (8000794 <lcd_send_char+0x180>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4a42      	ldr	r2, [pc, #264]	; (8000794 <lcd_send_char+0x180>)
 800068a:	8a11      	ldrh	r1, [r2, #16]
 800068c:	2201      	movs	r2, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fd7c 	bl	800118c <MCAL_GPIO_WritePin>
		tmp_data = (data << 4);
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	73bb      	strb	r3, [r7, #14]
		for(i=4; i<8; i++)
 800069a:	2304      	movs	r3, #4
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	e015      	b.n	80006cc <lcd_send_char+0xb8>
		{
			MCAL_GPIO_WritePin(LCD1.lcd_data_port, LCD_data_pins[i], ((tmp_data & (1<<i))>>i));
 80006a0:	4b3c      	ldr	r3, [pc, #240]	; (8000794 <lcd_send_char+0x180>)
 80006a2:	6858      	ldr	r0, [r3, #4]
 80006a4:	4a3c      	ldr	r2, [pc, #240]	; (8000798 <lcd_send_char+0x184>)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80006ac:	7bba      	ldrb	r2, [r7, #14]
 80006ae:	2401      	movs	r4, #1
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa04 f303 	lsl.w	r3, r4, r3
 80006b6:	401a      	ands	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	fa42 f303 	asr.w	r3, r2, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	461a      	mov	r2, r3
 80006c2:	f000 fd63 	bl	800118c <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3301      	adds	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2b07      	cmp	r3, #7
 80006d0:	dde6      	ble.n	80006a0 <lcd_send_char+0x8c>
		}
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_data);
		lcd_kick(&LCD1);
 80006d2:	4830      	ldr	r0, [pc, #192]	; (8000794 <lcd_send_char+0x180>)
 80006d4:	f7ff ff62 	bl	800059c <lcd_kick>
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_data);
		lcd_kick(&LCD2);
	}

#endif
}
 80006d8:	e058      	b.n	800078c <lcd_send_char+0x178>
	else if(Lcd_No == &LCD2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a2f      	ldr	r2, [pc, #188]	; (800079c <lcd_send_char+0x188>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d154      	bne.n	800078c <lcd_send_char+0x178>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.RS, GPIO_PIN_SET);
 80006e2:	4b2e      	ldr	r3, [pc, #184]	; (800079c <lcd_send_char+0x188>)
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	4a2d      	ldr	r2, [pc, #180]	; (800079c <lcd_send_char+0x188>)
 80006e8:	8a11      	ldrh	r1, [r2, #16]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fd4d 	bl	800118c <MCAL_GPIO_WritePin>
		unsigned char tmp_data = (data & 0xF0);
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	f023 030f 	bic.w	r3, r3, #15
 80006f8:	73fb      	strb	r3, [r7, #15]
		for(i=4; i<8; i++)
 80006fa:	2304      	movs	r3, #4
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	e015      	b.n	800072c <lcd_send_char+0x118>
			MCAL_GPIO_WritePin(LCD2.lcd_data_port, LCD_data_pins[i], ((tmp_data & (1<<i))>>i));
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <lcd_send_char+0x188>)
 8000702:	6858      	ldr	r0, [r3, #4]
 8000704:	4a24      	ldr	r2, [pc, #144]	; (8000798 <lcd_send_char+0x184>)
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800070c:	7bfa      	ldrb	r2, [r7, #15]
 800070e:	2401      	movs	r4, #1
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	fa04 f303 	lsl.w	r3, r4, r3
 8000716:	401a      	ands	r2, r3
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	fa42 f303 	asr.w	r3, r2, r3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	f000 fd33 	bl	800118c <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	3301      	adds	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	2b07      	cmp	r3, #7
 8000730:	dde6      	ble.n	8000700 <lcd_send_char+0xec>
		lcd_kick(&LCD2);
 8000732:	481a      	ldr	r0, [pc, #104]	; (800079c <lcd_send_char+0x188>)
 8000734:	f7ff ff32 	bl	800059c <lcd_kick>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.RS, GPIO_PIN_SET);
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <lcd_send_char+0x188>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	4a17      	ldr	r2, [pc, #92]	; (800079c <lcd_send_char+0x188>)
 800073e:	8a11      	ldrh	r1, [r2, #16]
 8000740:	2201      	movs	r2, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fd22 	bl	800118c <MCAL_GPIO_WritePin>
		tmp_data = (data << 4);
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	73fb      	strb	r3, [r7, #15]
		for(i=4; i<8; i++)
 800074e:	2304      	movs	r3, #4
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	e015      	b.n	8000780 <lcd_send_char+0x16c>
			MCAL_GPIO_WritePin(LCD2.lcd_data_port, LCD_data_pins[i], ((tmp_data & (1<<i))>>i));
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <lcd_send_char+0x188>)
 8000756:	6858      	ldr	r0, [r3, #4]
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <lcd_send_char+0x184>)
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000760:	7bfa      	ldrb	r2, [r7, #15]
 8000762:	2401      	movs	r4, #1
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	fa04 f303 	lsl.w	r3, r4, r3
 800076a:	401a      	ands	r2, r3
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	fa42 f303 	asr.w	r3, r2, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	f000 fd09 	bl	800118c <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	3301      	adds	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	2b07      	cmp	r3, #7
 8000784:	dde6      	ble.n	8000754 <lcd_send_char+0x140>
		lcd_kick(&LCD2);
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <lcd_send_char+0x188>)
 8000788:	f7ff ff08 	bl	800059c <lcd_kick>
}
 800078c:	bf00      	nop
 800078e:	371c      	adds	r7, #28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	20000014 	.word	0x20000014
 8000798:	20000000 	.word	0x20000000
 800079c:	20000028 	.word	0x20000028

080007a0 <lcd_send_string>:

void lcd_send_string(LCD_Pins_Config_t * Lcd_No,char *str)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	int character_counter1 = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
	int character_counter2 = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]

	while(*str != '\0')
 80007b2:	e04b      	b.n	800084c <lcd_send_string+0xac>
	{
		if(Lcd_No == &LCD1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a2a      	ldr	r2, [pc, #168]	; (8000860 <lcd_send_string+0xc0>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d120      	bne.n	80007fe <lcd_send_string+0x5e>
		{
			character_counter1++;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
			if(character_counter1 == 17)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b11      	cmp	r3, #17
 80007c6:	d105      	bne.n	80007d4 <lcd_send_string+0x34>
			{
				//go to second line position 0
				lcd_set_position(&LCD1,2,0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2102      	movs	r1, #2
 80007cc:	4824      	ldr	r0, [pc, #144]	; (8000860 <lcd_send_string+0xc0>)
 80007ce:	f000 f911 	bl	80009f4 <lcd_set_position>
 80007d2:	e00d      	b.n	80007f0 <lcd_send_string+0x50>
			}
			else if(character_counter1 > 32)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b20      	cmp	r3, #32
 80007d8:	dd0a      	ble.n	80007f0 <lcd_send_string+0x50>
			{
				//clear display
				lcd_send_command(&LCD1,clear_display);
 80007da:	2101      	movs	r1, #1
 80007dc:	4820      	ldr	r0, [pc, #128]	; (8000860 <lcd_send_string+0xc0>)
 80007de:	f000 f843 	bl	8000868 <lcd_send_command>
				//go to first line position 0
				lcd_set_position(&LCD1,1,0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2101      	movs	r1, #1
 80007e6:	481e      	ldr	r0, [pc, #120]	; (8000860 <lcd_send_string+0xc0>)
 80007e8:	f000 f904 	bl	80009f4 <lcd_set_position>
				character_counter1 = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
			}
			lcd_send_char(&LCD1,*str);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	481a      	ldr	r0, [pc, #104]	; (8000860 <lcd_send_string+0xc0>)
 80007f8:	f7ff ff0c 	bl	8000614 <lcd_send_char>
 80007fc:	e023      	b.n	8000846 <lcd_send_string+0xa6>
		}
		else if(Lcd_No == &LCD2)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a18      	ldr	r2, [pc, #96]	; (8000864 <lcd_send_string+0xc4>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d11f      	bne.n	8000846 <lcd_send_string+0xa6>
		{
			character_counter2++;
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	3301      	adds	r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
			if(character_counter2 == 17)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	2b11      	cmp	r3, #17
 8000810:	d105      	bne.n	800081e <lcd_send_string+0x7e>
			{
				//go to second line position 0
				lcd_set_position(&LCD2,2,0);
 8000812:	2200      	movs	r2, #0
 8000814:	2102      	movs	r1, #2
 8000816:	4813      	ldr	r0, [pc, #76]	; (8000864 <lcd_send_string+0xc4>)
 8000818:	f000 f8ec 	bl	80009f4 <lcd_set_position>
 800081c:	e00d      	b.n	800083a <lcd_send_string+0x9a>
			}
			else if(character_counter2 > 32)
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	2b20      	cmp	r3, #32
 8000822:	dd0a      	ble.n	800083a <lcd_send_string+0x9a>
			{
				//clear display
				lcd_send_command(&LCD2,clear_display);
 8000824:	2101      	movs	r1, #1
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <lcd_send_string+0xc4>)
 8000828:	f000 f81e 	bl	8000868 <lcd_send_command>
				//go to first line position 0
				lcd_set_position(&LCD2,1,0);
 800082c:	2200      	movs	r2, #0
 800082e:	2101      	movs	r1, #1
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <lcd_send_string+0xc4>)
 8000832:	f000 f8df 	bl	80009f4 <lcd_set_position>
				character_counter2 = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
			}
			lcd_send_char(&LCD2,*str);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4619      	mov	r1, r3
 8000840:	4808      	ldr	r0, [pc, #32]	; (8000864 <lcd_send_string+0xc4>)
 8000842:	f7ff fee7 	bl	8000614 <lcd_send_char>
		}
		str++;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	603b      	str	r3, [r7, #0]
	while(*str != '\0')
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1af      	bne.n	80007b4 <lcd_send_string+0x14>
	}
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000014 	.word	0x20000014
 8000864:	20000028 	.word	0x20000028

08000868 <lcd_send_command>:
	}

}

void lcd_send_command(LCD_Pins_Config_t * Lcd_No,unsigned char command)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
#endif

#ifdef FOUR_BIT_MODE
	int i;
	//delay_ms(3);
	dms(2);
 8000874:	2002      	movs	r0, #2
 8000876:	f000 fd4f 	bl	8001318 <dms>
	if(Lcd_No == &LCD1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a5a      	ldr	r2, [pc, #360]	; (80009e8 <lcd_send_command+0x180>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d155      	bne.n	800092e <lcd_send_command+0xc6>
	{
		//send last four bits of command
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.RS, GPIO_PIN_RESET);
 8000882:	4b59      	ldr	r3, [pc, #356]	; (80009e8 <lcd_send_command+0x180>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	4a58      	ldr	r2, [pc, #352]	; (80009e8 <lcd_send_command+0x180>)
 8000888:	8a11      	ldrh	r1, [r2, #16]
 800088a:	2200      	movs	r2, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fc7d 	bl	800118c <MCAL_GPIO_WritePin>
		char tmp_cmd;
		tmp_cmd = (command & 0xF0);
 8000892:	78fb      	ldrb	r3, [r7, #3]
 8000894:	f023 030f 	bic.w	r3, r3, #15
 8000898:	72bb      	strb	r3, [r7, #10]
		for(i=4; i<8; i++)
 800089a:	2304      	movs	r3, #4
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	e015      	b.n	80008cc <lcd_send_command+0x64>
		{
			MCAL_GPIO_WritePin(LCD1.lcd_data_port, LCD_data_pins[i], ((tmp_cmd & (1<<i))>>i));
 80008a0:	4b51      	ldr	r3, [pc, #324]	; (80009e8 <lcd_send_command+0x180>)
 80008a2:	6858      	ldr	r0, [r3, #4]
 80008a4:	4a51      	ldr	r2, [pc, #324]	; (80009ec <lcd_send_command+0x184>)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008ac:	7aba      	ldrb	r2, [r7, #10]
 80008ae:	2401      	movs	r4, #1
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	fa04 f303 	lsl.w	r3, r4, r3
 80008b6:	401a      	ands	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	fa42 f303 	asr.w	r3, r2, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	f000 fc63 	bl	800118c <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	dde6      	ble.n	80008a0 <lcd_send_command+0x38>
		}
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_cmd);
		lcd_kick(&LCD1);
 80008d2:	4845      	ldr	r0, [pc, #276]	; (80009e8 <lcd_send_command+0x180>)
 80008d4:	f7ff fe62 	bl	800059c <lcd_kick>
		//send first four bits of command
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.RS, GPIO_PIN_RESET);
 80008d8:	4b43      	ldr	r3, [pc, #268]	; (80009e8 <lcd_send_command+0x180>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	4a42      	ldr	r2, [pc, #264]	; (80009e8 <lcd_send_command+0x180>)
 80008de:	8a11      	ldrh	r1, [r2, #16]
 80008e0:	2200      	movs	r2, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fc52 	bl	800118c <MCAL_GPIO_WritePin>
		tmp_cmd = (command << 4);
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	72bb      	strb	r3, [r7, #10]
		for(i=4; i<8; i++)
 80008ee:	2304      	movs	r3, #4
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e015      	b.n	8000920 <lcd_send_command+0xb8>
		{
			MCAL_GPIO_WritePin(LCD1.lcd_data_port, LCD_data_pins[i], ((tmp_cmd & (1<<i))>>i));
 80008f4:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <lcd_send_command+0x180>)
 80008f6:	6858      	ldr	r0, [r3, #4]
 80008f8:	4a3c      	ldr	r2, [pc, #240]	; (80009ec <lcd_send_command+0x184>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000900:	7aba      	ldrb	r2, [r7, #10]
 8000902:	2401      	movs	r4, #1
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	fa04 f303 	lsl.w	r3, r4, r3
 800090a:	401a      	ands	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	fa42 f303 	asr.w	r3, r2, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	f000 fc39 	bl	800118c <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3301      	adds	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b07      	cmp	r3, #7
 8000924:	dde6      	ble.n	80008f4 <lcd_send_command+0x8c>
		}
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_cmd);
		lcd_kick(&LCD1);
 8000926:	4830      	ldr	r0, [pc, #192]	; (80009e8 <lcd_send_command+0x180>)
 8000928:	f7ff fe38 	bl	800059c <lcd_kick>
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_cmd);
		lcd_kick(&LCD2);
	}

#endif
}
 800092c:	e058      	b.n	80009e0 <lcd_send_command+0x178>
	else if(Lcd_No == &LCD2)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a2f      	ldr	r2, [pc, #188]	; (80009f0 <lcd_send_command+0x188>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d154      	bne.n	80009e0 <lcd_send_command+0x178>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.RS, GPIO_PIN_RESET);
 8000936:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <lcd_send_command+0x188>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	4a2d      	ldr	r2, [pc, #180]	; (80009f0 <lcd_send_command+0x188>)
 800093c:	8a11      	ldrh	r1, [r2, #16]
 800093e:	2200      	movs	r2, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fc23 	bl	800118c <MCAL_GPIO_WritePin>
		tmp_cmd = (command & 0xF0);
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	f023 030f 	bic.w	r3, r3, #15
 800094c:	72fb      	strb	r3, [r7, #11]
		for(i=4; i<8; i++)
 800094e:	2304      	movs	r3, #4
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e015      	b.n	8000980 <lcd_send_command+0x118>
			MCAL_GPIO_WritePin(LCD2.lcd_data_port, LCD_data_pins[i], ((tmp_cmd & (1<<i))>>i));
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <lcd_send_command+0x188>)
 8000956:	6858      	ldr	r0, [r3, #4]
 8000958:	4a24      	ldr	r2, [pc, #144]	; (80009ec <lcd_send_command+0x184>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000960:	7afa      	ldrb	r2, [r7, #11]
 8000962:	2401      	movs	r4, #1
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	fa04 f303 	lsl.w	r3, r4, r3
 800096a:	401a      	ands	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	fa42 f303 	asr.w	r3, r2, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	f000 fc09 	bl	800118c <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3301      	adds	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b07      	cmp	r3, #7
 8000984:	dde6      	ble.n	8000954 <lcd_send_command+0xec>
		lcd_kick(&LCD2);
 8000986:	481a      	ldr	r0, [pc, #104]	; (80009f0 <lcd_send_command+0x188>)
 8000988:	f7ff fe08 	bl	800059c <lcd_kick>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.RS, GPIO_PIN_RESET);
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <lcd_send_command+0x188>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <lcd_send_command+0x188>)
 8000992:	8a11      	ldrh	r1, [r2, #16]
 8000994:	2200      	movs	r2, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fbf8 	bl	800118c <MCAL_GPIO_WritePin>
		tmp_cmd = (command << 4);
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	72fb      	strb	r3, [r7, #11]
		for(i=4; i<8; i++)
 80009a2:	2304      	movs	r3, #4
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e015      	b.n	80009d4 <lcd_send_command+0x16c>
			MCAL_GPIO_WritePin(LCD2.lcd_data_port, LCD_data_pins[i], ((tmp_cmd & (1<<i))>>i));
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <lcd_send_command+0x188>)
 80009aa:	6858      	ldr	r0, [r3, #4]
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <lcd_send_command+0x184>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009b4:	7afa      	ldrb	r2, [r7, #11]
 80009b6:	2401      	movs	r4, #1
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	fa04 f303 	lsl.w	r3, r4, r3
 80009be:	401a      	ands	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	fa42 f303 	asr.w	r3, r2, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	f000 fbdf 	bl	800118c <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3301      	adds	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b07      	cmp	r3, #7
 80009d8:	dde6      	ble.n	80009a8 <lcd_send_command+0x140>
		lcd_kick(&LCD2);
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <lcd_send_command+0x188>)
 80009dc:	f7ff fdde 	bl	800059c <lcd_kick>
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	20000014 	.word	0x20000014
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000028 	.word	0x20000028

080009f4 <lcd_set_position>:


void lcd_set_position(LCD_Pins_Config_t * Lcd_No,int line, int position)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	if(Lcd_No == &LCD1)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4a4e      	ldr	r2, [pc, #312]	; (8000b3c <lcd_set_position+0x148>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d149      	bne.n	8000a9c <lcd_set_position+0xa8>
	{
		if(line == 1)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d110      	bne.n	8000a30 <lcd_set_position+0x3c>
		{
			if(position >= 0 && position < 16)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f2c0 808e 	blt.w	8000b32 <lcd_set_position+0x13e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	f300 808a 	bgt.w	8000b32 <lcd_set_position+0x13e>
			{
				lcd_send_command(&LCD1,cursor_first_line + position);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	3b80      	subs	r3, #128	; 0x80
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	4844      	ldr	r0, [pc, #272]	; (8000b3c <lcd_set_position+0x148>)
 8000a2a:	f7ff ff1d 	bl	8000868 <lcd_send_command>
				lcd_send_command(&LCD2,cursor_fourth_line + position);
			}
		}
	}

}
 8000a2e:	e080      	b.n	8000b32 <lcd_set_position+0x13e>
		else if (line == 2)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d10e      	bne.n	8000a54 <lcd_set_position+0x60>
			if(position >= 0 && position < 16)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db7a      	blt.n	8000b32 <lcd_set_position+0x13e>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b0f      	cmp	r3, #15
 8000a40:	dc77      	bgt.n	8000b32 <lcd_set_position+0x13e>
				lcd_send_command(&LCD1,cursor_second_line + position);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3b40      	subs	r3, #64	; 0x40
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	483b      	ldr	r0, [pc, #236]	; (8000b3c <lcd_set_position+0x148>)
 8000a4e:	f7ff ff0b 	bl	8000868 <lcd_send_command>
}
 8000a52:	e06e      	b.n	8000b32 <lcd_set_position+0x13e>
		else if (line == 3)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d10e      	bne.n	8000a78 <lcd_set_position+0x84>
			if(position >= 0 && position < 16)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db68      	blt.n	8000b32 <lcd_set_position+0x13e>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b0f      	cmp	r3, #15
 8000a64:	dc65      	bgt.n	8000b32 <lcd_set_position+0x13e>
				lcd_send_command(&LCD1,cursor_third_line + position);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	3b70      	subs	r3, #112	; 0x70
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4832      	ldr	r0, [pc, #200]	; (8000b3c <lcd_set_position+0x148>)
 8000a72:	f7ff fef9 	bl	8000868 <lcd_send_command>
}
 8000a76:	e05c      	b.n	8000b32 <lcd_set_position+0x13e>
		else if (line == 4)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	d159      	bne.n	8000b32 <lcd_set_position+0x13e>
			if(position >= 0 && position < 16)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db56      	blt.n	8000b32 <lcd_set_position+0x13e>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	dc53      	bgt.n	8000b32 <lcd_set_position+0x13e>
				lcd_send_command(&LCD1,cursor_fourth_line + position);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	3b30      	subs	r3, #48	; 0x30
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4619      	mov	r1, r3
 8000a94:	4829      	ldr	r0, [pc, #164]	; (8000b3c <lcd_set_position+0x148>)
 8000a96:	f7ff fee7 	bl	8000868 <lcd_send_command>
}
 8000a9a:	e04a      	b.n	8000b32 <lcd_set_position+0x13e>
	else if(Lcd_No == &LCD2)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <lcd_set_position+0x14c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d146      	bne.n	8000b32 <lcd_set_position+0x13e>
		if(line == 1)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10e      	bne.n	8000ac8 <lcd_set_position+0xd4>
			if(position >= 0 && position < 16)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db40      	blt.n	8000b32 <lcd_set_position+0x13e>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	dc3d      	bgt.n	8000b32 <lcd_set_position+0x13e>
				lcd_send_command(&LCD2,cursor_first_line + position);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	3b80      	subs	r3, #128	; 0x80
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481f      	ldr	r0, [pc, #124]	; (8000b40 <lcd_set_position+0x14c>)
 8000ac2:	f7ff fed1 	bl	8000868 <lcd_send_command>
}
 8000ac6:	e034      	b.n	8000b32 <lcd_set_position+0x13e>
		else if (line == 2)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d10e      	bne.n	8000aec <lcd_set_position+0xf8>
			if(position >= 0 && position < 16)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db2e      	blt.n	8000b32 <lcd_set_position+0x13e>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b0f      	cmp	r3, #15
 8000ad8:	dc2b      	bgt.n	8000b32 <lcd_set_position+0x13e>
				lcd_send_command(&LCD2,cursor_second_line + position);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	3b40      	subs	r3, #64	; 0x40
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4816      	ldr	r0, [pc, #88]	; (8000b40 <lcd_set_position+0x14c>)
 8000ae6:	f7ff febf 	bl	8000868 <lcd_send_command>
}
 8000aea:	e022      	b.n	8000b32 <lcd_set_position+0x13e>
		else if (line == 3)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d10e      	bne.n	8000b10 <lcd_set_position+0x11c>
			if(position >= 0 && position < 16)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1c      	blt.n	8000b32 <lcd_set_position+0x13e>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	dc19      	bgt.n	8000b32 <lcd_set_position+0x13e>
				lcd_send_command(&LCD2,cursor_third_line + position);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	3b70      	subs	r3, #112	; 0x70
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4619      	mov	r1, r3
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <lcd_set_position+0x14c>)
 8000b0a:	f7ff fead 	bl	8000868 <lcd_send_command>
}
 8000b0e:	e010      	b.n	8000b32 <lcd_set_position+0x13e>
		else if (line == 4)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	d10d      	bne.n	8000b32 <lcd_set_position+0x13e>
			if(position >= 0 && position < 16)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <lcd_set_position+0x13e>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b0f      	cmp	r3, #15
 8000b20:	dc07      	bgt.n	8000b32 <lcd_set_position+0x13e>
				lcd_send_command(&LCD2,cursor_fourth_line + position);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	3b30      	subs	r3, #48	; 0x30
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <lcd_set_position+0x14c>)
 8000b2e:	f7ff fe9b 	bl	8000868 <lcd_send_command>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000014 	.word	0x20000014
 8000b40:	20000028 	.word	0x20000028

08000b44 <lcd_clear>:

void lcd_clear(LCD_Pins_Config_t * Lcd_No)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	if(Lcd_No == &LCD1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <lcd_clear+0x34>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d104      	bne.n	8000b5e <lcd_clear+0x1a>
	{
		lcd_send_command(&LCD1,clear_display);
 8000b54:	2101      	movs	r1, #1
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <lcd_clear+0x34>)
 8000b58:	f7ff fe86 	bl	8000868 <lcd_send_command>
	else if(Lcd_No == &LCD2)
	{
		lcd_send_command(&LCD2,clear_display);
	}

}
 8000b5c:	e007      	b.n	8000b6e <lcd_clear+0x2a>
	else if(Lcd_No == &LCD2)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <lcd_clear+0x38>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d103      	bne.n	8000b6e <lcd_clear+0x2a>
		lcd_send_command(&LCD2,clear_display);
 8000b66:	2101      	movs	r1, #1
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <lcd_clear+0x38>)
 8000b6a:	f7ff fe7d 	bl	8000868 <lcd_send_command>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000014 	.word	0x20000014
 8000b7c:	20000028 	.word	0x20000028

08000b80 <Servo1_Entry_Gate_Init>:
#define Down 2


//B8 SERVO1
void Servo1_Entry_Gate_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	GPIO_PIN_CONFIG_T PinCinfg;
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_8;
 8000b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8a:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 8000b90:	2301      	movs	r3, #1
 8000b92:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <Servo1_Entry_Gate_Init+0x28>)
 8000b9a:	f000 fa49 	bl	8001030 <MCAL_GPIO_Init>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40010c00 	.word	0x40010c00

08000bac <Servo1_Entry_Gate>:

//Direction Up or Down
void Servo1_Entry_Gate(uint8_t Direction)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d10f      	bne.n	8000bdc <Servo1_Entry_Gate+0x30>
	{
		//servo1 Enter gate up +90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc2:	4812      	ldr	r0, [pc, #72]	; (8000c0c <Servo1_Entry_Gate+0x60>)
 8000bc4:	f000 fae2 	bl	800118c <MCAL_GPIO_WritePin>
		dus(500);
 8000bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bcc:	f000 fb8e 	bl	80012ec <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <Servo1_Entry_Gate+0x60>)
 8000bd8:	f000 fad8 	bl	800118c <MCAL_GPIO_WritePin>
	}
	if(Direction==Down)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d10f      	bne.n	8000c02 <Servo1_Entry_Gate+0x56>
	{
		//servo1 Enter gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be8:	4808      	ldr	r0, [pc, #32]	; (8000c0c <Servo1_Entry_Gate+0x60>)
 8000bea:	f000 facf 	bl	800118c <MCAL_GPIO_WritePin>
		dus(1488);
 8000bee:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000bf2:	f000 fb7b 	bl	80012ec <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <Servo1_Entry_Gate+0x60>)
 8000bfe:	f000 fac5 	bl	800118c <MCAL_GPIO_WritePin>
	}


}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <Servo2_Exit_Gate_Init>:

//B9 SERVO2
void Servo2_Exit_Gate_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 2*/
	GPIO_PIN_CONFIG_T PinCinfg;
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_9;
 8000c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c1a:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 8000c20:	2301      	movs	r3, #1
 8000c22:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <Servo2_Exit_Gate_Init+0x28>)
 8000c2a:	f000 fa01 	bl	8001030 <MCAL_GPIO_Init>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <Servo2_Exit_Gate>:

//Direction Up or Down
void Servo2_Exit_Gate(uint8_t Direction)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d10f      	bne.n	8000c6c <Servo2_Exit_Gate+0x30>
	{
		//servo2 Exit gate up +90
		GPIO_PIN_CONFIG_T PinCinfg;
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c52:	4812      	ldr	r0, [pc, #72]	; (8000c9c <Servo2_Exit_Gate+0x60>)
 8000c54:	f000 fa9a 	bl	800118c <MCAL_GPIO_WritePin>
		dus(500);
 8000c58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c5c:	f000 fb46 	bl	80012ec <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <Servo2_Exit_Gate+0x60>)
 8000c68:	f000 fa90 	bl	800118c <MCAL_GPIO_WritePin>
	}

	if(Direction == Down)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d10f      	bne.n	8000c92 <Servo2_Exit_Gate+0x56>
	{
		//servo2 Exit gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <Servo2_Exit_Gate+0x60>)
 8000c7a:	f000 fa87 	bl	800118c <MCAL_GPIO_WritePin>
		dus(1488);
 8000c7e:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000c82:	f000 fb33 	bl	80012ec <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <Servo2_Exit_Gate+0x60>)
 8000c8e:	f000 fa7d 	bl	800118c <MCAL_GPIO_WritePin>
	}

}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010c00 	.word	0x40010c00

08000ca0 <EXTI0_IRQHandler>:
1: selected trigger request occurred
This bit is set when the selected edge event arrives on the external interrupt line. This bit is
cleared by writing a ‘1’ into the bit.*/

void EXTI0_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	//clear pending flag
	EXTI->PR |= 1<<0;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <EXTI0_IRQHandler+0x1c>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <EXTI0_IRQHandler+0x1c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[0]();
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <EXTI0_IRQHandler+0x20>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4798      	blx	r3
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010400 	.word	0x40010400
 8000cc0:	2000005c 	.word	0x2000005c

08000cc4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <EXTI1_IRQHandler+0x1c>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <EXTI1_IRQHandler+0x1c>)
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[1]();
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <EXTI1_IRQHandler+0x20>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4798      	blx	r3
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40010400 	.word	0x40010400
 8000ce4:	2000005c 	.word	0x2000005c

08000ce8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <EXTI2_IRQHandler+0x1c>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <EXTI2_IRQHandler+0x1c>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[2]();
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <EXTI2_IRQHandler+0x20>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	4798      	blx	r3
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40010400 	.word	0x40010400
 8000d08:	2000005c 	.word	0x2000005c

08000d0c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <EXTI3_IRQHandler+0x1c>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <EXTI3_IRQHandler+0x1c>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[3]();
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <EXTI3_IRQHandler+0x20>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4798      	blx	r3

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40010400 	.word	0x40010400
 8000d2c:	2000005c 	.word	0x2000005c

08000d30 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <EXTI4_IRQHandler+0x1c>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <EXTI4_IRQHandler+0x1c>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[4]();
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <EXTI4_IRQHandler+0x20>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	4798      	blx	r3
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40010400 	.word	0x40010400
 8000d50:	2000005c 	.word	0x2000005c

08000d54 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5; GP_IRQ_callBack[5]();}
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	f003 0320 	and.w	r3, r3, #32
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d008      	beq.n	8000d76 <EXTI9_5_IRQHandler+0x22>
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000d6a:	f043 0320 	orr.w	r3, r3, #32
 8000d6e:	6153      	str	r3, [r2, #20]
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <EXTI9_5_IRQHandler+0xa4>)
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6; GP_IRQ_callBack[6]();}
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d008      	beq.n	8000d94 <EXTI9_5_IRQHandler+0x40>
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <EXTI9_5_IRQHandler+0xa4>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7; GP_IRQ_callBack[7]();}
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d008      	beq.n	8000db2 <EXTI9_5_IRQHandler+0x5e>
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000daa:	6153      	str	r3, [r2, #20]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <EXTI9_5_IRQHandler+0xa4>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8; GP_IRQ_callBack[8]();}
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d008      	beq.n	8000dd0 <EXTI9_5_IRQHandler+0x7c>
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <EXTI9_5_IRQHandler+0xa4>)
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9; GP_IRQ_callBack[9]();}
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d008      	beq.n	8000dee <EXTI9_5_IRQHandler+0x9a>
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <EXTI9_5_IRQHandler+0xa0>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6153      	str	r3, [r2, #20]
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <EXTI9_5_IRQHandler+0xa4>)
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	4798      	blx	r3

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010400 	.word	0x40010400
 8000df8:	2000005c 	.word	0x2000005c

08000dfc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10; GP_IRQ_callBack[10]();}
 8000e00:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d008      	beq.n	8000e1e <EXTI15_10_IRQHandler+0x22>
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6153      	str	r3, [r2, #20]
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <EXTI15_10_IRQHandler+0xc0>)
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11; GP_IRQ_callBack[11]();}
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d008      	beq.n	8000e3c <EXTI15_10_IRQHandler+0x40>
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e34:	6153      	str	r3, [r2, #20]
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <EXTI15_10_IRQHandler+0xc0>)
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12; GP_IRQ_callBack[12]();}
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d008      	beq.n	8000e5a <EXTI15_10_IRQHandler+0x5e>
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e52:	6153      	str	r3, [r2, #20]
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <EXTI15_10_IRQHandler+0xc0>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13; GP_IRQ_callBack[13]();}
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d008      	beq.n	8000e78 <EXTI15_10_IRQHandler+0x7c>
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <EXTI15_10_IRQHandler+0xc0>)
 8000e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e76:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14; GP_IRQ_callBack[14]();}
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d008      	beq.n	8000e96 <EXTI15_10_IRQHandler+0x9a>
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8e:	6153      	str	r3, [r2, #20]
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <EXTI15_10_IRQHandler+0xc0>)
 8000e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e94:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15; GP_IRQ_callBack[15]();}
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d008      	beq.n	8000eb4 <EXTI15_10_IRQHandler+0xb8>
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <EXTI15_10_IRQHandler+0xbc>)
 8000ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <EXTI15_10_IRQHandler+0xc0>)
 8000eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb2:	4798      	blx	r3

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40010400 	.word	0x40010400
 8000ebc:	2000005c 	.word	0x2000005c

08000ec0 <Get_Bit_Location>:
 * @linked in	   : https://www.linkedin.com/in/ahmed-wafdy-094567242/
 */
#include "GPIO.h"


uint8_t Get_Bit_Location(uint16_t PinNumber){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ed0:	f000 80a5 	beq.w	800101e <Get_Bit_Location+0x15e>
 8000ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ed8:	f300 80a3 	bgt.w	8001022 <Get_Bit_Location+0x162>
 8000edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ee0:	f000 809b 	beq.w	800101a <Get_Bit_Location+0x15a>
 8000ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ee8:	f300 809b 	bgt.w	8001022 <Get_Bit_Location+0x162>
 8000eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ef0:	f000 8091 	beq.w	8001016 <Get_Bit_Location+0x156>
 8000ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ef8:	f300 8093 	bgt.w	8001022 <Get_Bit_Location+0x162>
 8000efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f00:	f000 8087 	beq.w	8001012 <Get_Bit_Location+0x152>
 8000f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f08:	f300 808b 	bgt.w	8001022 <Get_Bit_Location+0x162>
 8000f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f10:	d07d      	beq.n	800100e <Get_Bit_Location+0x14e>
 8000f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f16:	f300 8084 	bgt.w	8001022 <Get_Bit_Location+0x162>
 8000f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1e:	d074      	beq.n	800100a <Get_Bit_Location+0x14a>
 8000f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f24:	dc7d      	bgt.n	8001022 <Get_Bit_Location+0x162>
 8000f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f2a:	d06c      	beq.n	8001006 <Get_Bit_Location+0x146>
 8000f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f30:	dc77      	bgt.n	8001022 <Get_Bit_Location+0x162>
 8000f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f36:	d064      	beq.n	8001002 <Get_Bit_Location+0x142>
 8000f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f3c:	dc71      	bgt.n	8001022 <Get_Bit_Location+0x162>
 8000f3e:	2b80      	cmp	r3, #128	; 0x80
 8000f40:	d05d      	beq.n	8000ffe <Get_Bit_Location+0x13e>
 8000f42:	2b80      	cmp	r3, #128	; 0x80
 8000f44:	dc6d      	bgt.n	8001022 <Get_Bit_Location+0x162>
 8000f46:	2b20      	cmp	r3, #32
 8000f48:	dc48      	bgt.n	8000fdc <Get_Bit_Location+0x11c>
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dd69      	ble.n	8001022 <Get_Bit_Location+0x162>
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	2b1f      	cmp	r3, #31
 8000f52:	d866      	bhi.n	8001022 <Get_Bit_Location+0x162>
 8000f54:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <Get_Bit_Location+0x9c>)
 8000f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5a:	bf00      	nop
 8000f5c:	08000fe3 	.word	0x08000fe3
 8000f60:	08000fe7 	.word	0x08000fe7
 8000f64:	08001023 	.word	0x08001023
 8000f68:	08000feb 	.word	0x08000feb
 8000f6c:	08001023 	.word	0x08001023
 8000f70:	08001023 	.word	0x08001023
 8000f74:	08001023 	.word	0x08001023
 8000f78:	08000fef 	.word	0x08000fef
 8000f7c:	08001023 	.word	0x08001023
 8000f80:	08001023 	.word	0x08001023
 8000f84:	08001023 	.word	0x08001023
 8000f88:	08001023 	.word	0x08001023
 8000f8c:	08001023 	.word	0x08001023
 8000f90:	08001023 	.word	0x08001023
 8000f94:	08001023 	.word	0x08001023
 8000f98:	08000ff3 	.word	0x08000ff3
 8000f9c:	08001023 	.word	0x08001023
 8000fa0:	08001023 	.word	0x08001023
 8000fa4:	08001023 	.word	0x08001023
 8000fa8:	08001023 	.word	0x08001023
 8000fac:	08001023 	.word	0x08001023
 8000fb0:	08001023 	.word	0x08001023
 8000fb4:	08001023 	.word	0x08001023
 8000fb8:	08001023 	.word	0x08001023
 8000fbc:	08001023 	.word	0x08001023
 8000fc0:	08001023 	.word	0x08001023
 8000fc4:	08001023 	.word	0x08001023
 8000fc8:	08001023 	.word	0x08001023
 8000fcc:	08001023 	.word	0x08001023
 8000fd0:	08001023 	.word	0x08001023
 8000fd4:	08001023 	.word	0x08001023
 8000fd8:	08000ff7 	.word	0x08000ff7
 8000fdc:	2b40      	cmp	r3, #64	; 0x40
 8000fde:	d00c      	beq.n	8000ffa <Get_Bit_Location+0x13a>
 8000fe0:	e01f      	b.n	8001022 <Get_Bit_Location+0x162>
		case GPIO_PIN_0:
			return 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e01e      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_1:
			return 4;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e01c      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_2:
			return 8;
 8000fea:	2308      	movs	r3, #8
 8000fec:	e01a      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_3:
			return 12;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	e018      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_4:
			return 16;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	e016      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_5:
			return 20;
 8000ff6:	2314      	movs	r3, #20
 8000ff8:	e014      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_6:
			return 24;
 8000ffa:	2318      	movs	r3, #24
 8000ffc:	e012      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_7:
			return 28;
 8000ffe:	231c      	movs	r3, #28
 8001000:	e010      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_8:
			return 0;
 8001002:	2300      	movs	r3, #0
 8001004:	e00e      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_9:
			return 4;
 8001006:	2304      	movs	r3, #4
 8001008:	e00c      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_10:
			return 8;
 800100a:	2308      	movs	r3, #8
 800100c:	e00a      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_11:
			return 12;
 800100e:	230c      	movs	r3, #12
 8001010:	e008      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_12:
			return 16;
 8001012:	2310      	movs	r3, #16
 8001014:	e006      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_13:
			return 20;
 8001016:	2314      	movs	r3, #20
 8001018:	e004      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_14:
			return 24;
 800101a:	2318      	movs	r3, #24
 800101c:	e002      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_15:
			return 28;
 800101e:	231c      	movs	r3, #28
 8001020:	e000      	b.n	8001024 <Get_Bit_Location+0x164>
			break;
	}
	return 0;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MCAL_GPIO_Init>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- PinConfig: Pointer to GPIO_PIN_CONFIG_T structure that contains the configurations of GPIO pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_Init(GPIO_t *GPIOx,GPIO_PIN_CONFIG_T *PinConfig){
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..E)
	//Port configuration register high (GPIOx_CRH) (x=A..E)
	volatile uint32_t *ConfiguredRegister = NULL;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_config = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
	if(PinConfig->GPIO_PIN_NUMBER < GPIO_PIN_8){
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	2bff      	cmp	r3, #255	; 0xff
 8001048:	d802      	bhi.n	8001050 <MCAL_GPIO_Init+0x20>
		ConfiguredRegister = &(GPIOx->CRL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e002      	b.n	8001056 <MCAL_GPIO_Init+0x26>
	}
	else{
		ConfiguredRegister = &(GPIOx->CRH);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3304      	adds	r3, #4
 8001054:	60fb      	str	r3, [r7, #12]
	}
	// We should clear registers CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) &= ~(0xf << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff30 	bl	8000ec0 <Get_Bit_Location>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	230f      	movs	r3, #15
 8001066:	4093      	lsls	r3, r2
 8001068:	43da      	mvns	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	401a      	ands	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	601a      	str	r2, [r3, #0]
	// if GPIO ====>Output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	789b      	ldrb	r3, [r3, #2]
 8001078:	2b05      	cmp	r3, #5
 800107a:	d00b      	beq.n	8001094 <MCAL_GPIO_Init+0x64>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d007      	beq.n	8001094 <MCAL_GPIO_Init+0x64>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	789b      	ldrb	r3, [r3, #2]
 8001088:	2b07      	cmp	r3, #7
 800108a:	d003      	beq.n	8001094 <MCAL_GPIO_Init+0x64>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	789b      	ldrb	r3, [r3, #2]
 8001090:	2b06      	cmp	r3, #6
 8001092:	d10a      	bne.n	80010aa <MCAL_GPIO_Init+0x7a>
	{
		//set CNFy[1:0],MODEy[1:0]
		pin_config = ( ( (PinConfig->GPIO_MODE-4) << 2 ) | (PinConfig->GPIO_OUTPUT_SPEED) ) &0x0f ;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	789b      	ldrb	r3, [r3, #2]
 8001098:	3b04      	subs	r3, #4
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	78d2      	ldrb	r2, [r2, #3]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	e02b      	b.n	8001102 <MCAL_GPIO_Init+0xd2>
	}
	// if GPIO ====>Input 00: Input mode (reset state)
	else{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog)){
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	789b      	ldrb	r3, [r3, #2]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d003      	beq.n	80010ba <MCAL_GPIO_Init+0x8a>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	789b      	ldrb	r3, [r3, #2]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d106      	bne.n	80010c8 <MCAL_GPIO_Init+0x98>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( (PinConfig->GPIO_MODE) << 2 ) | 0x0) &0x0f);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	789b      	ldrb	r3, [r3, #2]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	e01c      	b.n	8001102 <MCAL_GPIO_Init+0xd2>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT){
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	789b      	ldrb	r3, [r3, #2]
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d102      	bne.n	80010d6 <MCAL_GPIO_Init+0xa6>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( GPIO_MODE_INPUT_FLO << 2 ) | 0x0) &0x0f);
 80010d0:	2304      	movs	r3, #4
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	e015      	b.n	8001102 <MCAL_GPIO_Init+0xd2>
		}
		//Input with pull-up / pull-down
		else{
			pin_config = (( ( GPIO_MODE_INPUT_PU << 2 ) | 0x0) &0x0f);
 80010d6:	2308      	movs	r3, #8
 80010d8:	60bb      	str	r3, [r7, #8]
			if(PinConfig->GPIO_MODE ==  GPIO_MODE_INPUT_PU){
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	789b      	ldrb	r3, [r3, #2]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d107      	bne.n	80010f2 <MCAL_GPIO_Init+0xc2>
				//PxODR register 1 Input pull-up
				GPIOx->ODR |= PinConfig->GPIO_PIN_NUMBER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	8812      	ldrh	r2, [r2, #0]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	e007      	b.n	8001102 <MCAL_GPIO_Init+0xd2>
			}
			else{
				//PxODR register 0 Input pull-down
				GPIOx->ODR &= ~(PinConfig->GPIO_PIN_NUMBER);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	8812      	ldrh	r2, [r2, #0]
 80010fa:	43d2      	mvns	r2, r2
 80010fc:	401a      	ands	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) |= (pin_config << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff feda 	bl	8000ec0 <Get_Bit_Location>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	fa03 f202 	lsl.w	r2, r3, r2
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	431a      	orrs	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <MCAL_GPIO_ReadPin>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- PinNumber : set pin number according to @ref GPIO_PIN_NUMBER
 * @retval		- return pin state according to @ref GPIO_PIN_STATE
 * Note			- none
 * */
uint8_t MCAL_GPIO_ReadPin(GPIO_t *GPIOx,uint16_t PinNumber){
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
	uint8_t bit_status;
	if( ( (GPIOx->IDR)&PinNumber) != GPIO_PIN_RESET){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	4013      	ands	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <MCAL_GPIO_ReadPin+0x1e>
		bit_status = GPIO_PIN_SET;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e001      	b.n	800114a <MCAL_GPIO_ReadPin+0x22>
	}
	else{
		bit_status = GPIO_PIN_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
	}
	return bit_status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <MCAL_GPIO_ReadPort>:
 * @brief		- Read value in all port pins
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @retval		- return port value
 * Note			- none
 * */
uint16_t MCAL_GPIO_ReadPort(GPIO_t *GPIOx){
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	uint16_t port_value;
	port_value = (uint16_t)GPIOx->IDR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	81fb      	strh	r3, [r7, #14]
	return port_value;
 8001164:	89fb      	ldrh	r3, [r7, #14]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <MCAL_GPIO_WritePort>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- value: value which will be written on port
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_WritePort(GPIO_t *GPIOx,uint8_t value){
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR = (uint32_t)value;
 800117c:	78fa      	ldrb	r2, [r7, #3]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60da      	str	r2, [r3, #12]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <MCAL_GPIO_WritePin>:
 * @param[in]	- PinNumber : set pin number according to @ref GPIO_PIN_NUMBER
 * @param[in]	- value: value which will be written on pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx,uint16_t PinNumber,uint8_t value){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET){
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <MCAL_GPIO_WritePin+0x1e>
		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	611a      	str	r2, [r3, #16]
0: No action on the corresponding ODRx bit
1: Reset the corresponding ODRx bit*/
		GPIOx->BRR =(uint32_t)PinNumber;

	}
}
 80011a8:	e002      	b.n	80011b0 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR =(uint32_t)PinNumber;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	615a      	str	r2, [r3, #20]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <MCAL_GPIO_TogglePin>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- PinNumber : set pin number according to @ref GPIO_PIN_NUMBER
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_TogglePin(GPIO_t *GPIOx,uint16_t PinNumber){
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= PinNumber;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	405a      	eors	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60da      	str	r2, [r3, #12]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <MCAL_RCC_Get_SYS_CLKFreq>:
	1111: SYSCLK divided by 512*/
const uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};


uint32_t MCAL_RCC_Get_SYS_CLKFreq(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: not allowed*/

	switch( (RCC->CFGR >>2) & 0b11 )
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MCAL_RCC_Get_SYS_CLKFreq+0x38>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b0a      	cmp	r3, #10
 80011ec:	d008      	beq.n	8001200 <MCAL_RCC_Get_SYS_CLKFreq+0x24>
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d808      	bhi.n	8001204 <MCAL_RCC_Get_SYS_CLKFreq+0x28>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <MCAL_RCC_Get_SYS_CLKFreq+0x20>
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d006      	beq.n	8001208 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
 80011fa:	e003      	b.n	8001204 <MCAL_RCC_Get_SYS_CLKFreq+0x28>
	{

	case 00:
		return HSI_RC_CLK;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MCAL_RCC_Get_SYS_CLKFreq+0x3c>)
 80011fe:	e005      	b.n	800120c <MCAL_RCC_Get_SYS_CLKFreq+0x30>
		//return HSE_CLK;
		break;

	case 10:
		//to do calc it HSE PLLCLK & PLLMULL & PLL source Mux
		return 16000000;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MCAL_RCC_Get_SYS_CLKFreq+0x40>)
 8001202:	e003      	b.n	800120c <MCAL_RCC_Get_SYS_CLKFreq+0x30>
		break;

	default:
		return 0;
 8001204:	2300      	movs	r3, #0
 8001206:	e001      	b.n	800120c <MCAL_RCC_Get_SYS_CLKFreq+0x30>
		break;
 8001208:	bf00      	nop
		break;

	}
	return 0;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	40021000 	.word	0x40021000
 8001218:	007a1200 	.word	0x007a1200
 800121c:	00f42400 	.word	0x00f42400

08001220 <MCAL_RCC_Get_HCLK_Freq>:


uint32_t MCAL_RCC_Get_HCLK_Freq(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	1011: SYSCLK divided by 16
	1100: SYSCLK divided by 64
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512*/
	return MCAL_RCC_Get_SYS_CLKFreq() >> AHBPrescTable[( (RCC->CFGR >> 7) & 0b1111) ];/*(( RCC->CFGR >>8) & 0b1111) This Is
 8001224:	f7ff ffda 	bl	80011dc <MCAL_RCC_Get_SYS_CLKFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <MCAL_RCC_Get_HCLK_Freq+0x20>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	09db      	lsrs	r3, r3, #7
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	4903      	ldr	r1, [pc, #12]	; (8001244 <MCAL_RCC_Get_HCLK_Freq+0x24>)
 8001236:	5ccb      	ldrb	r3, [r1, r3]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
	                                                      Read Value of AHB  prescaler To Determine index On 2d Upper Array */


}
 800123c:	4618      	mov	r0, r3
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	080021cc 	.word	0x080021cc

08001248 <MCAL_RCC_Get_PCLK1_Freq>:



uint32_t MCAL_RCC_Get_PCLK1_Freq(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return ( MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[ (( RCC->CFGR >>8) & 0b111) ] ); /*(( RCC->CFGR >>8) & 0b111) This Is
 800124c:	f7ff ffe8 	bl	8001220 <MCAL_RCC_Get_HCLK_Freq>
 8001250:	4602      	mov	r2, r0
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <MCAL_RCC_Get_PCLK1_Freq+0x20>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	4903      	ldr	r1, [pc, #12]	; (800126c <MCAL_RCC_Get_PCLK1_Freq+0x24>)
 800125e:	5ccb      	ldrb	r3, [r1, r3]
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
	                                                      Read Value of  PPRE1 prescaler To Determine index On Upper Array */

}
 8001264:	4618      	mov	r0, r3
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	080021c4 	.word	0x080021c4

08001270 <MCAL_RCC_Get_PCLK2_Freq>:


uint32_t MCAL_RCC_Get_PCLK2_Freq(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return (MCAL_RCC_Get_HCLK_Freq() >> (APBPrescTable[( (RCC->CFGR >>11) & 0b111 )])); /*(( RCC->CFGR >>11) & 0b111) This Is
 8001274:	f7ff ffd4 	bl	8001220 <MCAL_RCC_Get_HCLK_Freq>
 8001278:	4602      	mov	r2, r0
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <MCAL_RCC_Get_PCLK2_Freq+0x20>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	0adb      	lsrs	r3, r3, #11
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	4903      	ldr	r1, [pc, #12]	; (8001294 <MCAL_RCC_Get_PCLK2_Freq+0x24>)
 8001286:	5ccb      	ldrb	r3, [r1, r3]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
	                                                      Read Value of  PPRE2 prescaler To Determine index On Upper Array */

}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	080021c4 	.word	0x080021c4

08001298 <Timer2_init>:

#include "Timer.h"


void Timer2_init(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <Timer2_init+0x44>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <Timer2_init+0x44>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <Timer2_init+0x48>)
 80012aa:	2207      	movs	r2, #7
 80012ac:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05-->20*0.05=1
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <Timer2_init+0x4c>)
 80012b0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80012b4:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 80012b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 80012c6:	bf00      	nop
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <Timer2_init+0x50>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0fb      	beq.n	80012c8 <Timer2_init+0x30>
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	4002101c 	.word	0x4002101c
 80012e0:	40000028 	.word	0x40000028
 80012e4:	4000002c 	.word	0x4000002c
 80012e8:	40000010 	.word	0x40000010

080012ec <dus>:

void dus(int us)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <dus+0x28>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 80012fa:	bf00      	nop
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <dus+0x28>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3fa      	bcc.n	80012fc <dus+0x10>
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40000024 	.word	0x40000024

08001318 <dms>:

void dms(int ms)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	e006      	b.n	8001338 <dms+0x20>
	{
		dus(1000);
 800132a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800132e:	f7ff ffdd 	bl	80012ec <dus>
	for(i=0;i<ms;i++)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3301      	adds	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	dbf4      	blt.n	800132a <dms+0x12>
	}
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART configuration
 * @retval 			- none
 * Note				- support for now Asynchronous mode & clock 8 MHz
 */
void MCAL_UART_Init(USART_t* USARTx, USART_Config_t* UART_Config)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a59      	ldr	r2, [pc, #356]	; (80014c0 <MCAL_UART_Init+0x174>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d109      	bne.n	8001372 <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLOCK_EN();
 800135e:	4b59      	ldr	r3, [pc, #356]	; (80014c4 <MCAL_UART_Init+0x178>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a58      	ldr	r2, [pc, #352]	; (80014c4 <MCAL_UART_Init+0x178>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001368:	6193      	str	r3, [r2, #24]
		Global_USART_Config[0] = UART_Config;
 800136a:	4a57      	ldr	r2, [pc, #348]	; (80014c8 <MCAL_UART_Init+0x17c>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e01a      	b.n	80013a8 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a55      	ldr	r2, [pc, #340]	; (80014cc <MCAL_UART_Init+0x180>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d109      	bne.n	800138e <MCAL_UART_Init+0x42>
	{
		RCC_USART2_CLOCK_EN();
 800137a:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <MCAL_UART_Init+0x178>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <MCAL_UART_Init+0x178>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[1] = UART_Config;
 8001386:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <MCAL_UART_Init+0x17c>)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6053      	str	r3, [r2, #4]
 800138c:	e00c      	b.n	80013a8 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART3)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4f      	ldr	r2, [pc, #316]	; (80014d0 <MCAL_UART_Init+0x184>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d108      	bne.n	80013a8 <MCAL_UART_Init+0x5c>
	{
		RCC_USART3_CLOCK_EN();
 8001396:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <MCAL_UART_Init+0x178>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a4a      	ldr	r2, [pc, #296]	; (80014c4 <MCAL_UART_Init+0x178>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[2] = UART_Config;
 80013a2:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <MCAL_UART_Init+0x17c>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	6093      	str	r3, [r2, #8]
	}
	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13;							// bit 13 UE: USART enable
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |= UART_Config->USART_Mode; 		// USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	8812      	ldrh	r2, [r2, #0]
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60da      	str	r2, [r3, #12]

	/* 4. Pay-load width */
	USARTx->CR1 |= UART_Config->Payload_Length;		// USARTx->CR1 bit 12 M: word length
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	8912      	ldrh	r2, [r2, #8]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	60da      	str	r2, [r3, #12]

	/* 5. configuration of parity control bit field */
	USARTx->CR1 |= UART_Config->Parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	8952      	ldrh	r2, [r2, #10]
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60da      	str	r2, [r3, #12]

	/* 6. configuration the no. of stop bits */
	USARTx->CR2 |= UART_Config->StopBits;			// USART_CR2 bits 13:12 STOP: stop bits
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	8992      	ldrh	r2, [r2, #12]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	611a      	str	r2, [r3, #16]


	/* 7. USART HW Flow Control */
	USARTx->CR3 |= UART_Config->HwFlowCtl;			// USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	89d2      	ldrh	r2, [r2, #14]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	615a      	str	r2, [r3, #20]


	/* 8. configuration of BRR (baud-rate register) */
	if (USARTx == USART1)							// PCLK2 for USART1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a30      	ldr	r2, [pc, #192]	; (80014c0 <MCAL_UART_Init+0x174>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d103      	bne.n	800140a <MCAL_UART_Init+0xbe>

	{
		pclk = MCAL_RCC_Get_PCLK2_Freq();
 8001402:	f7ff ff35 	bl	8001270 <MCAL_RCC_Get_PCLK2_Freq>
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	e002      	b.n	8001410 <MCAL_UART_Init+0xc4>
	}
	else											// PCLK1 for USART2, 3

	{
		pclk = MCAL_RCC_Get_PCLK1_Freq();
 800140a:	f7ff ff1d 	bl	8001248 <MCAL_RCC_Get_PCLK1_Freq>
 800140e:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	fbb2 f3f3 	udiv	r3, r2, r3
 800141c:	0119      	lsls	r1, r3, #4
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	009a      	lsls	r2, r3, #2
 8001428:	441a      	add	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	fbb2 f2f3 	udiv	r2, r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001440:	2064      	movs	r0, #100	; 0x64
 8001442:	fb00 f303 	mul.w	r3, r0, r3
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <MCAL_UART_Init+0x188>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	095b      	lsrs	r3, r3, #5
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	430b      	orrs	r3, r1
 8001458:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	8a1b      	ldrh	r3, [r3, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d026      	beq.n	80014b6 <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	8a12      	ldrh	r2, [r2, #16]
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60da      	str	r2, [r3, #12]

		/* Enable NVIC for USARTx IRQ */
		if (USARTx == USART1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <MCAL_UART_Init+0x174>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d106      	bne.n	800148c <MCAL_UART_Init+0x140>
			NVIC_IRQ37_USART1_ENABLE();
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MCAL_UART_Init+0x18c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <MCAL_UART_Init+0x18c>)
 8001484:	f043 0320 	orr.w	r3, r3, #32
 8001488:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_ENABLE();

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_ENABLE();
	}
}
 800148a:	e014      	b.n	80014b6 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <MCAL_UART_Init+0x180>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d106      	bne.n	80014a2 <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_ENABLE();
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MCAL_UART_Init+0x18c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <MCAL_UART_Init+0x18c>)
 800149a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	e009      	b.n	80014b6 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART3)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <MCAL_UART_Init+0x184>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d105      	bne.n	80014b6 <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_ENABLE();
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MCAL_UART_Init+0x18c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <MCAL_UART_Init+0x18c>)
 80014b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b4:	6013      	str	r3, [r2, #0]
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	20000098 	.word	0x20000098
 80014cc:	40004400 	.word	0x40004400
 80014d0:	40004800 	.word	0x40004800
 80014d4:	51eb851f 	.word	0x51eb851f
 80014d8:	e000e104 	.word	0xe000e104

080014dc <MCAL_UART_SendData>:
	4. Select DMA enable (DMAT) in USART_CR3 if Multi buffer Communication is to takeplace. Configure the DMA register as explained in multibuffer communication.
	5. Select the desired baud rate using the USART_BRR register.
	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission.
 * */
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	4613      	mov	r3, r2
 80014e8:	71fb      	strb	r3, [r7, #7]
	//7. Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this	for each data to be transmitted in case of single buffer.
		//8. After writing the last data into the USART_DR register, wait until TC=1. This indicates
		//that the transmission of the last frame is complete. This is required for instance when
		//the USART is disabled or enters the Halt mode to avoid corrupting the last
		//transmission
	if (PollingEn == USART_enable)
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d106      	bne.n	80014fe <MCAL_UART_SendData+0x22>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(USARTx->SR & 1<<7));
 80014f0:	bf00      	nop
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f9      	beq.n	80014f2 <MCAL_UART_SendData+0x16>
	/* When Transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 */
	if (USARTx == USART1)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <MCAL_UART_SendData+0xd4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d117      	bne.n	8001536 <MCAL_UART_SendData+0x5a>
	{
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <MCAL_UART_SendData+0xd8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	891b      	ldrh	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <MCAL_UART_SendData+0x40>
		{
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	605a      	str	r2, [r3, #4]
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
		{
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
		}
	}
}
 800151a:	e043      	b.n	80015a4 <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_9B)
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <MCAL_UART_SendData+0xd8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	891b      	ldrh	r3, [r3, #8]
 8001522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001526:	d13d      	bne.n	80015a4 <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	605a      	str	r2, [r3, #4]
}
 8001534:	e036      	b.n	80015a4 <MCAL_UART_SendData+0xc8>
	else if (USARTx == USART2)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <MCAL_UART_SendData+0xdc>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d117      	bne.n	800156e <MCAL_UART_SendData+0x92>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MCAL_UART_SendData+0xd8>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	891b      	ldrh	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <MCAL_UART_SendData+0x78>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	605a      	str	r2, [r3, #4]
}
 8001552:	e027      	b.n	80015a4 <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_9B)
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MCAL_UART_SendData+0xd8>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800155e:	d121      	bne.n	80015a4 <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	605a      	str	r2, [r3, #4]
}
 800156c:	e01a      	b.n	80015a4 <MCAL_UART_SendData+0xc8>
	else if (USARTx == USART3)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MCAL_UART_SendData+0xe0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d116      	bne.n	80015a4 <MCAL_UART_SendData+0xc8>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MCAL_UART_SendData+0xd8>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	891b      	ldrh	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <MCAL_UART_SendData+0xb0>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
}
 800158a:	e00b      	b.n	80015a4 <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MCAL_UART_SendData+0xd8>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	891b      	ldrh	r3, [r3, #8]
 8001592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001596:	d105      	bne.n	80015a4 <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40013800 	.word	0x40013800
 80015b4:	20000098 	.word	0x20000098
 80015b8:	40004400 	.word	0x40004400
 80015bc:	40004800 	.word	0x40004800

080015c0 <MCAL_UART_ReceiveData>:
	place. Configure the DMA register as explained in multibuffer communication. STEP 3
	5. Select the desired baud rate using the baud rate register USART_BRR
	6. Set the RE bit USART_CR1. This enables the receiver which begins searching for a start bit
 * */
void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechanism PollingEn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	4613      	mov	r3, r2
 80015cc:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until RXNE flag is set in the SR */
	if (PollingEn == USART_enable)
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <MCAL_UART_ReceiveData+0x22>
	{
		while (!(USARTx->SR & 1<<5));
 80015d4:	bf00      	nop
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f9      	beq.n	80015d6 <MCAL_UART_ReceiveData+0x16>
	}

	/* 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame */
	if (USARTx == USART1)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4a4d      	ldr	r2, [pc, #308]	; (800171c <MCAL_UART_ReceiveData+0x15c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12e      	bne.n	8001648 <MCAL_UART_ReceiveData+0x88>
	{
		/* 9 Bits Data */
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_9B)
 80015ea:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <MCAL_UART_ReceiveData+0x160>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	891b      	ldrh	r3, [r3, #8]
 80015f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f4:	d112      	bne.n	800161c <MCAL_UART_ReceiveData+0x5c>
		{
			if (Global_USART_Config[0]->Parity == UART_Parity_NONE)
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <MCAL_UART_ReceiveData+0x160>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	895b      	ldrh	r3, [r3, #10]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d105      	bne.n	800160c <MCAL_UART_ReceiveData+0x4c>
			{
				/* All 9 bits are data */
				*pRxBuffer = USARTx->DR ;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	b29a      	uxth	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	801a      	strh	r2, [r3, #0]
				/* just least 7 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
			}
		}
	}
}
 800160a:	e082      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	b29b      	uxth	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	b29a      	uxth	r2, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	801a      	strh	r2, [r3, #0]
}
 800161a:	e07a      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
			if (Global_USART_Config[0]->Parity == UART_Parity_NONE)
 800161c:	4b40      	ldr	r3, [pc, #256]	; (8001720 <MCAL_UART_ReceiveData+0x160>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	895b      	ldrh	r3, [r3, #10]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d107      	bne.n	8001636 <MCAL_UART_ReceiveData+0x76>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	b29b      	uxth	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	b29a      	uxth	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	801a      	strh	r2, [r3, #0]
}
 8001634:	e06d      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	b29b      	uxth	r3, r3
 800163c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001640:	b29a      	uxth	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	801a      	strh	r2, [r3, #0]
}
 8001646:	e064      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
	else if (USARTx == USART2)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4a36      	ldr	r2, [pc, #216]	; (8001724 <MCAL_UART_ReceiveData+0x164>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d12e      	bne.n	80016ae <MCAL_UART_ReceiveData+0xee>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_9B)
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <MCAL_UART_ReceiveData+0x160>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	891b      	ldrh	r3, [r3, #8]
 8001656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800165a:	d112      	bne.n	8001682 <MCAL_UART_ReceiveData+0xc2>
			if (Global_USART_Config[1]->Parity == UART_Parity_NONE)
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <MCAL_UART_ReceiveData+0x160>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	895b      	ldrh	r3, [r3, #10]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d105      	bne.n	8001672 <MCAL_UART_ReceiveData+0xb2>
				*pRxBuffer = USARTx->DR ;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	b29a      	uxth	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	801a      	strh	r2, [r3, #0]
}
 8001670:	e04f      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	b29b      	uxth	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	b29a      	uxth	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	801a      	strh	r2, [r3, #0]
}
 8001680:	e047      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
			if (Global_USART_Config[1]->Parity == UART_Parity_NONE)
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <MCAL_UART_ReceiveData+0x160>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	895b      	ldrh	r3, [r3, #10]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d107      	bne.n	800169c <MCAL_UART_ReceiveData+0xdc>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	b29b      	uxth	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	b29a      	uxth	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	801a      	strh	r2, [r3, #0]
}
 800169a:	e03a      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	801a      	strh	r2, [r3, #0]
}
 80016ac:	e031      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
	else if (USARTx == USART3)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <MCAL_UART_ReceiveData+0x168>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12d      	bne.n	8001712 <MCAL_UART_ReceiveData+0x152>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MCAL_UART_ReceiveData+0x160>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	891b      	ldrh	r3, [r3, #8]
 80016bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c0:	d112      	bne.n	80016e8 <MCAL_UART_ReceiveData+0x128>
			if (Global_USART_Config[2]->Parity == UART_Parity_NONE)
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MCAL_UART_ReceiveData+0x160>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	895b      	ldrh	r3, [r3, #10]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <MCAL_UART_ReceiveData+0x118>
				*pRxBuffer = USARTx->DR ;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	801a      	strh	r2, [r3, #0]
}
 80016d6:	e01c      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	801a      	strh	r2, [r3, #0]
}
 80016e6:	e014      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
			if (Global_USART_Config[2]->Parity == UART_Parity_NONE)
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <MCAL_UART_ReceiveData+0x160>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	895b      	ldrh	r3, [r3, #10]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d107      	bne.n	8001702 <MCAL_UART_ReceiveData+0x142>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	801a      	strh	r2, [r3, #0]
}
 8001700:	e007      	b.n	8001712 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	b29b      	uxth	r3, r3
 8001708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800170c:	b29a      	uxth	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	801a      	strh	r2, [r3, #0]
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	40013800 	.word	0x40013800
 8001720:	20000098 	.word	0x20000098
 8001724:	40004400 	.word	0x40004400
 8001728:	40004800 	.word	0x40004800

0800172c <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	GPIO_PIN_CONFIG_T Pin_Config;

	if (USARTx == USART1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a73      	ldr	r2, [pc, #460]	; (8001904 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d149      	bne.n	80017d0 <MCAL_UART_GPIO_Set_Pins+0xa4>
	{
		// PA9 Tx
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_9;
 800173c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001740:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001742:	2306      	movs	r3, #6
 8001744:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	4619      	mov	r1, r3
 8001750:	486d      	ldr	r0, [pc, #436]	; (8001908 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001752:	f7ff fc6d 	bl	8001030 <MCAL_GPIO_Init>

		// PA10 Rx
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_10;
 8001756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175a:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800175c:	2301      	movs	r3, #1
 800175e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4619      	mov	r1, r3
 8001766:	4868      	ldr	r0, [pc, #416]	; (8001908 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001768:	f7ff fc62 	bl	8001030 <MCAL_GPIO_Init>

		if (Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 800176c:	4b67      	ldr	r3, [pc, #412]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	89db      	ldrh	r3, [r3, #14]
 8001772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001776:	d005      	beq.n	8001784 <MCAL_UART_GPIO_Set_Pins+0x58>
 8001778:	4b64      	ldr	r3, [pc, #400]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	89db      	ldrh	r3, [r3, #14]
 800177e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001782:	d10a      	bne.n	800179a <MCAL_UART_GPIO_Set_Pins+0x6e>
		{
			// PA11 CTS
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_11;
 8001784:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001788:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800178a:	2301      	movs	r3, #1
 800178c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4619      	mov	r1, r3
 8001794:	485c      	ldr	r0, [pc, #368]	; (8001908 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001796:	f7ff fc4b 	bl	8001030 <MCAL_GPIO_Init>
		}

		if (Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 800179a:	4b5c      	ldr	r3, [pc, #368]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	89db      	ldrh	r3, [r3, #14]
 80017a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a4:	d006      	beq.n	80017b4 <MCAL_UART_GPIO_Set_Pins+0x88>
 80017a6:	4b59      	ldr	r3, [pc, #356]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	89db      	ldrh	r3, [r3, #14]
 80017ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017b0:	f040 80a3 	bne.w	80018fa <MCAL_UART_GPIO_Set_Pins+0x1ce>
		{
			// PA12 RTS
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_12;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b8:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80017ba:	2306      	movs	r3, #6
 80017bc:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80017be:	2301      	movs	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	4619      	mov	r1, r3
 80017c8:	484f      	ldr	r0, [pc, #316]	; (8001908 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 80017ca:	f7ff fc31 	bl	8001030 <MCAL_GPIO_Init>
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
		}
	}
}
 80017ce:	e094      	b.n	80018fa <MCAL_UART_GPIO_Set_Pins+0x1ce>
	else if (USARTx == USART2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a4f      	ldr	r2, [pc, #316]	; (8001910 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d144      	bne.n	8001862 <MCAL_UART_GPIO_Set_Pins+0x136>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_2;
 80017d8:	2304      	movs	r3, #4
 80017da:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80017dc:	2306      	movs	r3, #6
 80017de:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	4847      	ldr	r0, [pc, #284]	; (8001908 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 80017ec:	f7ff fc20 	bl	8001030 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_3;
 80017f0:	2308      	movs	r3, #8
 80017f2:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4619      	mov	r1, r3
 80017fe:	4842      	ldr	r0, [pc, #264]	; (8001908 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001800:	f7ff fc16 	bl	8001030 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8001804:	4b41      	ldr	r3, [pc, #260]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	89db      	ldrh	r3, [r3, #14]
 800180a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800180e:	d005      	beq.n	800181c <MCAL_UART_GPIO_Set_Pins+0xf0>
 8001810:	4b3e      	ldr	r3, [pc, #248]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	89db      	ldrh	r3, [r3, #14]
 8001816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800181a:	d109      	bne.n	8001830 <MCAL_UART_GPIO_Set_Pins+0x104>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_0;
 800181c:	2301      	movs	r3, #1
 800181e:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001820:	2301      	movs	r3, #1
 8001822:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	4837      	ldr	r0, [pc, #220]	; (8001908 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 800182c:	f7ff fc00 	bl	8001030 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	89db      	ldrh	r3, [r3, #14]
 8001836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800183a:	d005      	beq.n	8001848 <MCAL_UART_GPIO_Set_Pins+0x11c>
 800183c:	4b33      	ldr	r3, [pc, #204]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	89db      	ldrh	r3, [r3, #14]
 8001842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001846:	d158      	bne.n	80018fa <MCAL_UART_GPIO_Set_Pins+0x1ce>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_1;
 8001848:	2302      	movs	r3, #2
 800184a:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800184c:	2306      	movs	r3, #6
 800184e:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	482b      	ldr	r0, [pc, #172]	; (8001908 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 800185c:	f7ff fbe8 	bl	8001030 <MCAL_GPIO_Init>
}
 8001860:	e04b      	b.n	80018fa <MCAL_UART_GPIO_Set_Pins+0x1ce>
	else if (USARTx == USART3)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d147      	bne.n	80018fa <MCAL_UART_GPIO_Set_Pins+0x1ce>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_10;
 800186a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800186e:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001870:	2306      	movs	r3, #6
 8001872:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	4619      	mov	r1, r3
 800187e:	4826      	ldr	r0, [pc, #152]	; (8001918 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8001880:	f7ff fbd6 	bl	8001030 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_11;
 8001884:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001888:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800188a:	2301      	movs	r3, #1
 800188c:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4619      	mov	r1, r3
 8001894:	4820      	ldr	r0, [pc, #128]	; (8001918 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8001896:	f7ff fbcb 	bl	8001030 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	89db      	ldrh	r3, [r3, #14]
 80018a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a4:	d005      	beq.n	80018b2 <MCAL_UART_GPIO_Set_Pins+0x186>
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	89db      	ldrh	r3, [r3, #14]
 80018ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018b0:	d10a      	bne.n	80018c8 <MCAL_UART_GPIO_Set_Pins+0x19c>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_13;
 80018b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b6:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	4619      	mov	r1, r3
 80018c2:	4815      	ldr	r0, [pc, #84]	; (8001918 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 80018c4:	f7ff fbb4 	bl	8001030 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	89db      	ldrh	r3, [r3, #14]
 80018ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d2:	d005      	beq.n	80018e0 <MCAL_UART_GPIO_Set_Pins+0x1b4>
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	89db      	ldrh	r3, [r3, #14]
 80018da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018de:	d10c      	bne.n	80018fa <MCAL_UART_GPIO_Set_Pins+0x1ce>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_14;
 80018e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018e4:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80018e6:	2306      	movs	r3, #6
 80018e8:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	4619      	mov	r1, r3
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 80018f6:	f7ff fb9b 	bl	8001030 <MCAL_GPIO_Init>
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40013800 	.word	0x40013800
 8001908:	40010800 	.word	0x40010800
 800190c:	20000098 	.word	0x20000098
 8001910:	40004400 	.word	0x40004400
 8001914:	40004800 	.word	0x40004800
 8001918:	40010c00 	.word	0x40010c00

0800191c <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8001920:	4b02      	ldr	r3, [pc, #8]	; (800192c <USART1_IRQHandler+0x10>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4798      	blx	r3
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000098 	.word	0x20000098

08001930 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <USART2_IRQHandler+0x10>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4798      	blx	r3
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000098 	.word	0x20000098

08001944 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <USART3_IRQHandler+0x10>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4798      	blx	r3
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000098 	.word	0x20000098

08001958 <main>:

LCD_Pins_Config_t LCD1 = {GPIOB,GPIOB,GPIOB,GPIOB,GPIO_PIN_11,GPIO_PIN_10};
LCD_Pins_Config_t LCD2 = {GPIOA,GPIOA,GPIOA,GPIOA,GPIO_PIN_5,GPIO_PIN_6};

int main(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08e      	sub	sp, #56	; 0x38
 800195c:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLOCK_EN();
 800195e:	4b9f      	ldr	r3, [pc, #636]	; (8001bdc <main+0x284>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a9e      	ldr	r2, [pc, #632]	; (8001bdc <main+0x284>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_EN();
 800196a:	4b9c      	ldr	r3, [pc, #624]	; (8001bdc <main+0x284>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a9b      	ldr	r2, [pc, #620]	; (8001bdc <main+0x284>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLOCK_EN();
 8001976:	4b99      	ldr	r3, [pc, #612]	; (8001bdc <main+0x284>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4a98      	ldr	r2, [pc, #608]	; (8001bdc <main+0x284>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6193      	str	r3, [r2, #24]
	keypad_Init();
 8001982:	f7fe fbf5 	bl	8000170 <keypad_Init>
	Timer2_init();
 8001986:	f7ff fc87 	bl	8001298 <Timer2_init>
	Servo1_Entry_Gate_Init();
 800198a:	f7ff f8f9 	bl	8000b80 <Servo1_Entry_Gate_Init>
	Servo2_Exit_Gate_Init();
 800198e:	f7ff f93f 	bl	8000c10 <Servo2_Exit_Gate_Init>
	 * PA11 CTC
	 * PA12 RTS
	 */
	USART_Config_t uartCFG;

	uartCFG.BaudRate = UART_BaudRate_115200;
 8001992:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001996:	623b      	str	r3, [r7, #32]
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE;
 8001998:	2300      	movs	r3, #0
 800199a:	857b      	strh	r3, [r7, #42]	; 0x2a
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 800199c:	2320      	movs	r3, #32
 800199e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uartCFG.P_IRQ_CallBack = RFID_CARD_Enter_CallBack;
 80019a0:	4b8f      	ldr	r3, [pc, #572]	; (8001be0 <main+0x288>)
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
	uartCFG.Parity = UART_Parity_NONE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 80019a8:	2300      	movs	r3, #0
 80019aa:	84bb      	strh	r3, [r7, #36]	; 0x24
	uartCFG.StopBits = UART_StopBits_1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	853b      	strh	r3, [r7, #40]	; 0x28
	uartCFG.USART_Mode = UART_Mode_TX_RX;
 80019b0:	230c      	movs	r3, #12
 80019b2:	83bb      	strh	r3, [r7, #28]
	MCAL_UART_Init(USART1, &uartCFG);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	488a      	ldr	r0, [pc, #552]	; (8001be4 <main+0x28c>)
 80019bc:	f7ff fcc6 	bl	800134c <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80019c0:	4888      	ldr	r0, [pc, #544]	; (8001be4 <main+0x28c>)
 80019c2:	f7ff feb3 	bl	800172c <MCAL_UART_GPIO_Set_Pins>
	 * PA0 ->CTS
	 * PA1 ->RTS
	 */
	USART_Config_t uart2CFG;

	uart2CFG.BaudRate = UART_BaudRate_115200;
 80019c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019ca:	60bb      	str	r3, [r7, #8]
	uart2CFG.HwFlowCtl = UART_HwFlowCtl_NONE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	827b      	strh	r3, [r7, #18]
	uart2CFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 80019d0:	2320      	movs	r3, #32
 80019d2:	82bb      	strh	r3, [r7, #20]
	uart2CFG.P_IRQ_CallBack = RFID_CARD_EXIT_CallBack;
 80019d4:	4b84      	ldr	r3, [pc, #528]	; (8001be8 <main+0x290>)
 80019d6:	61bb      	str	r3, [r7, #24]
	uart2CFG.Parity = UART_Parity_NONE;
 80019d8:	2300      	movs	r3, #0
 80019da:	81fb      	strh	r3, [r7, #14]
	uart2CFG.Payload_Length = UART_Payload_Length_8B;
 80019dc:	2300      	movs	r3, #0
 80019de:	81bb      	strh	r3, [r7, #12]
	uart2CFG.StopBits = UART_StopBits_1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	823b      	strh	r3, [r7, #16]
	uart2CFG.USART_Mode = UART_Mode_TX_RX;
 80019e4:	230c      	movs	r3, #12
 80019e6:	80bb      	strh	r3, [r7, #4]
	MCAL_UART_Init(USART2, &uart2CFG);
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	487f      	ldr	r0, [pc, #508]	; (8001bec <main+0x294>)
 80019ee:	f7ff fcad 	bl	800134c <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART2);
 80019f2:	487e      	ldr	r0, [pc, #504]	; (8001bec <main+0x294>)
 80019f4:	f7ff fe9a 	bl	800172c <MCAL_UART_GPIO_Set_Pins>

	lcd_init(&LCD1);
 80019f8:	487d      	ldr	r0, [pc, #500]	; (8001bf0 <main+0x298>)
 80019fa:	f7fe fcb1 	bl	8000360 <lcd_init>
	lcd_init(&LCD2);
 80019fe:	487d      	ldr	r0, [pc, #500]	; (8001bf4 <main+0x29c>)
 8001a00:	f7fe fcae 	bl	8000360 <lcd_init>
	LEDs_Init();
 8001a04:	f000 f9ee 	bl	8001de4 <LEDs_Init>
	PIRs_Init();
 8001a08:	f000 fa0c 	bl	8001e24 <PIRs_Init>

	/*==========Enter IDs To Store In Array Pass==========*/
	 Register_IDs_From_Admin();
 8001a0c:	f000 fa30 	bl	8001e70 <Register_IDs_From_Admin>

	Welcome();
 8001a10:	f000 f9a6 	bl	8001d60 <Welcome>
	dms(200);
 8001a14:	20c8      	movs	r0, #200	; 0xc8
 8001a16:	f7ff fc7f 	bl	8001318 <dms>
	LCD_Display_Empty_Slots();
 8001a1a:	f000 f9c1 	bl	8001da0 <LCD_Display_Empty_Slots>


	int i=0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
	while(1)
	{
		if(Available_Slots>'0')
 8001a22:	4b75      	ldr	r3, [pc, #468]	; (8001bf8 <main+0x2a0>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b30      	cmp	r3, #48	; 0x30
 8001a28:	d91b      	bls.n	8001a62 <main+0x10a>
		{
			lcd_set_position(&LCD2, 2, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4871      	ldr	r0, [pc, #452]	; (8001bf4 <main+0x29c>)
 8001a30:	f7fe ffe0 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD2,"Enter ID in");
 8001a34:	4971      	ldr	r1, [pc, #452]	; (8001bfc <main+0x2a4>)
 8001a36:	486f      	ldr	r0, [pc, #444]	; (8001bf4 <main+0x29c>)
 8001a38:	f7fe feb2 	bl	80007a0 <lcd_send_string>
			lcd_set_position(&LCD2,3,0 );
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2103      	movs	r1, #3
 8001a40:	486c      	ldr	r0, [pc, #432]	; (8001bf4 <main+0x29c>)
 8001a42:	f7fe ffd7 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD2,"Card Reader");
 8001a46:	496e      	ldr	r1, [pc, #440]	; (8001c00 <main+0x2a8>)
 8001a48:	486a      	ldr	r0, [pc, #424]	; (8001bf4 <main+0x29c>)
 8001a4a:	f7fe fea9 	bl	80007a0 <lcd_send_string>
			while(RFID_CARD_Enter ==0 && RFID_CARD_EXIT==0); //Wait for Enter any id
 8001a4e:	bf00      	nop
 8001a50:	4b6c      	ldr	r3, [pc, #432]	; (8001c04 <main+0x2ac>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d119      	bne.n	8001a8c <main+0x134>
 8001a58:	4b6b      	ldr	r3, [pc, #428]	; (8001c08 <main+0x2b0>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f7      	beq.n	8001a50 <main+0xf8>
 8001a60:	e014      	b.n	8001a8c <main+0x134>
		}
		else
		{
			lcd_clear(&LCD2);
 8001a62:	4864      	ldr	r0, [pc, #400]	; (8001bf4 <main+0x29c>)
 8001a64:	f7ff f86e 	bl	8000b44 <lcd_clear>
			lcd_set_position(&LCD2, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4861      	ldr	r0, [pc, #388]	; (8001bf4 <main+0x29c>)
 8001a6e:	f7fe ffc1 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD2,"Parking Is Full");
 8001a72:	4966      	ldr	r1, [pc, #408]	; (8001c0c <main+0x2b4>)
 8001a74:	485f      	ldr	r0, [pc, #380]	; (8001bf4 <main+0x29c>)
 8001a76:	f7fe fe93 	bl	80007a0 <lcd_send_string>
			lcd_set_position(&LCD2, 2, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	485d      	ldr	r0, [pc, #372]	; (8001bf4 <main+0x29c>)
 8001a80:	f7fe ffb8 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD2,"Entry Not Allowed");
 8001a84:	4962      	ldr	r1, [pc, #392]	; (8001c10 <main+0x2b8>)
 8001a86:	485b      	ldr	r0, [pc, #364]	; (8001bf4 <main+0x29c>)
 8001a88:	f7fe fe8a 	bl	80007a0 <lcd_send_string>
		}

		for(i=0;i<3;i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a90:	e017      	b.n	8001ac2 <main+0x16a>
		{
			if(RFID_CARD_Enter == pass[i] || RFID_CARD_EXIT == pass[i] )
 8001a92:	4a60      	ldr	r2, [pc, #384]	; (8001c14 <main+0x2bc>)
 8001a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <main+0x2ac>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d008      	beq.n	8001ab6 <main+0x15e>
 8001aa4:	4a5b      	ldr	r2, [pc, #364]	; (8001c14 <main+0x2bc>)
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa8:	4413      	add	r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <main+0x2b0>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d102      	bne.n	8001abc <main+0x164>
			{
				Search_Done=1;
 8001ab6:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <main+0x2c0>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
		for(i=0;i<3;i++)
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	3301      	adds	r3, #1
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	dde4      	ble.n	8001a92 <main+0x13a>
			}

		}
		/*=====================Enter gate=====================*/
		if(Search_Done == 1 && RFID_CARD_Enter !=0 && Available_Slots>'0')
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <main+0x2c0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d150      	bne.n	8001b72 <main+0x21a>
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <main+0x2ac>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d04c      	beq.n	8001b72 <main+0x21a>
 8001ad8:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <main+0x2a0>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b30      	cmp	r3, #48	; 0x30
 8001ade:	d948      	bls.n	8001b72 <main+0x21a>
		{
			lcd_clear(&LCD2);
 8001ae0:	4844      	ldr	r0, [pc, #272]	; (8001bf4 <main+0x29c>)
 8001ae2:	f7ff f82f 	bl	8000b44 <lcd_clear>
			lcd_set_position(&LCD2, 2, 3);
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4842      	ldr	r0, [pc, #264]	; (8001bf4 <main+0x29c>)
 8001aec:	f7fe ff82 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD2,"Right ID");
 8001af0:	494a      	ldr	r1, [pc, #296]	; (8001c1c <main+0x2c4>)
 8001af2:	4840      	ldr	r0, [pc, #256]	; (8001bf4 <main+0x29c>)
 8001af4:	f7fe fe54 	bl	80007a0 <lcd_send_string>
			lcd_set_position(&LCD2, 3, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2103      	movs	r1, #3
 8001afc:	483d      	ldr	r0, [pc, #244]	; (8001bf4 <main+0x29c>)
 8001afe:	f7fe ff79 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD2,"Entry gate Opens");
 8001b02:	4947      	ldr	r1, [pc, #284]	; (8001c20 <main+0x2c8>)
 8001b04:	483b      	ldr	r0, [pc, #236]	; (8001bf4 <main+0x29c>)
 8001b06:	f7fe fe4b 	bl	80007a0 <lcd_send_string>

			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b10:	4844      	ldr	r0, [pc, #272]	; (8001c24 <main+0x2cc>)
 8001b12:	f7ff fb3b 	bl	800118c <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(UP);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff f848 	bl	8000bac <Servo1_Entry_Gate>
			Available_Slots--;
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <main+0x2a0>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <main+0x2a0>)
 8001b26:	701a      	strb	r2, [r3, #0]

			RFID_CARD_Enter =0;
 8001b28:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <main+0x2ac>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	801a      	strh	r2, [r3, #0]
			Search_Done =0;
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <main+0x2c0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]

			dms(300);
 8001b34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b38:	f7ff fbee 	bl	8001318 <dms>

			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)==1)
 8001b3c:	e002      	b.n	8001b44 <main+0x1ec>
			{
				dms(200);
 8001b3e:	20c8      	movs	r0, #200	; 0xc8
 8001b40:	f7ff fbea 	bl	8001318 <dms>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)==1)
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	4837      	ldr	r0, [pc, #220]	; (8001c24 <main+0x2cc>)
 8001b48:	f7ff faee 	bl	8001128 <MCAL_GPIO_ReadPin>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d0f5      	beq.n	8001b3e <main+0x1e6>
			}


			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001b52:	2201      	movs	r2, #1
 8001b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b58:	4832      	ldr	r0, [pc, #200]	; (8001c24 <main+0x2cc>)
 8001b5a:	f7ff fb17 	bl	800118c <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(Down);
 8001b5e:	2002      	movs	r0, #2
 8001b60:	f7ff f824 	bl	8000bac <Servo1_Entry_Gate>


			Welcome();
 8001b64:	f000 f8fc 	bl	8001d60 <Welcome>
			dms(200);
 8001b68:	20c8      	movs	r0, #200	; 0xc8
 8001b6a:	f7ff fbd5 	bl	8001318 <dms>
			LCD_Display_Empty_Slots();
 8001b6e:	f000 f917 	bl	8001da0 <LCD_Display_Empty_Slots>

		}
		/*===================Exit gate====================*/
		if(Search_Done == 1 && RFID_CARD_EXIT !=0 && Available_Slots<'3')
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <main+0x2c0>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d17a      	bne.n	8001c70 <main+0x318>
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <main+0x2b0>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d076      	beq.n	8001c70 <main+0x318>
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <main+0x2a0>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b32      	cmp	r3, #50	; 0x32
 8001b88:	d872      	bhi.n	8001c70 <main+0x318>
		{
			lcd_clear(&LCD2);
 8001b8a:	481a      	ldr	r0, [pc, #104]	; (8001bf4 <main+0x29c>)
 8001b8c:	f7fe ffda 	bl	8000b44 <lcd_clear>
			lcd_set_position(&LCD2, 2, 3);
 8001b90:	2203      	movs	r2, #3
 8001b92:	2102      	movs	r1, #2
 8001b94:	4817      	ldr	r0, [pc, #92]	; (8001bf4 <main+0x29c>)
 8001b96:	f7fe ff2d 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD2,"Right ID!");
 8001b9a:	4923      	ldr	r1, [pc, #140]	; (8001c28 <main+0x2d0>)
 8001b9c:	4815      	ldr	r0, [pc, #84]	; (8001bf4 <main+0x29c>)
 8001b9e:	f7fe fdff 	bl	80007a0 <lcd_send_string>
			lcd_set_position(&LCD2, 3, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <main+0x29c>)
 8001ba8:	f7fe ff24 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD2,"Exit Gate Opens");
 8001bac:	491f      	ldr	r1, [pc, #124]	; (8001c2c <main+0x2d4>)
 8001bae:	4811      	ldr	r0, [pc, #68]	; (8001bf4 <main+0x29c>)
 8001bb0:	f7fe fdf6 	bl	80007a0 <lcd_send_string>

			//Green led*/
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bba:	481a      	ldr	r0, [pc, #104]	; (8001c24 <main+0x2cc>)
 8001bbc:	f7ff fae6 	bl	800118c <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(UP);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff f83b 	bl	8000c3c <Servo2_Exit_Gate>
			Available_Slots++;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <main+0x2a0>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <main+0x2a0>)
 8001bd0:	701a      	strb	r2, [r3, #0]
			dms(300);
 8001bd2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bd6:	f7ff fb9f 	bl	8001318 <dms>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==1) //Read the PIR2 state
 8001bda:	e02c      	b.n	8001c36 <main+0x2de>
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	08001d19 	.word	0x08001d19
 8001be4:	40013800 	.word	0x40013800
 8001be8:	08001d3d 	.word	0x08001d3d
 8001bec:	40004400 	.word	0x40004400
 8001bf0:	20000014 	.word	0x20000014
 8001bf4:	20000028 	.word	0x20000028
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	080020c0 	.word	0x080020c0
 8001c00:	080020cc 	.word	0x080020cc
 8001c04:	200000a4 	.word	0x200000a4
 8001c08:	200000a6 	.word	0x200000a6
 8001c0c:	080020d8 	.word	0x080020d8
 8001c10:	080020e8 	.word	0x080020e8
 8001c14:	200000a8 	.word	0x200000a8
 8001c18:	200000ab 	.word	0x200000ab
 8001c1c:	080020fc 	.word	0x080020fc
 8001c20:	08002108 	.word	0x08002108
 8001c24:	40010800 	.word	0x40010800
 8001c28:	0800211c 	.word	0x0800211c
 8001c2c:	08002128 	.word	0x08002128
			{
				dms(200);
 8001c30:	20c8      	movs	r0, #200	; 0xc8
 8001c32:	f7ff fb71 	bl	8001318 <dms>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==1) //Read the PIR2 state
 8001c36:	2102      	movs	r1, #2
 8001c38:	4830      	ldr	r0, [pc, #192]	; (8001cfc <main+0x3a4>)
 8001c3a:	f7ff fa75 	bl	8001128 <MCAL_GPIO_ReadPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d0f5      	beq.n	8001c30 <main+0x2d8>
			}
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001c44:	2201      	movs	r2, #1
 8001c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4a:	482c      	ldr	r0, [pc, #176]	; (8001cfc <main+0x3a4>)
 8001c4c:	f7ff fa9e 	bl	800118c <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(Down);
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7fe fff3 	bl	8000c3c <Servo2_Exit_Gate>

			RFID_CARD_EXIT =0;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <main+0x3a8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	801a      	strh	r2, [r3, #0]
			Search_Done =0;
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <main+0x3ac>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]

			Welcome();
 8001c62:	f000 f87d 	bl	8001d60 <Welcome>
			dms(200);
 8001c66:	20c8      	movs	r0, #200	; 0xc8
 8001c68:	f7ff fb56 	bl	8001318 <dms>
			LCD_Display_Empty_Slots();
 8001c6c:	f000 f898 	bl	8001da0 <LCD_Display_Empty_Slots>
		}

		/*==================Wrong Id====================*/
		if(Search_Done == 0 && (RFID_CARD_Enter >0 || RFID_CARD_EXIT>0) )
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <main+0x3ac>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f47f aed4 	bne.w	8001a22 <main+0xca>
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <main+0x3b0>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d104      	bne.n	8001c8c <main+0x334>
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <main+0x3a8>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f43f aecb 	beq.w	8001a22 <main+0xca>
		{
			lcd_clear(&LCD2);
 8001c8c:	481f      	ldr	r0, [pc, #124]	; (8001d0c <main+0x3b4>)
 8001c8e:	f7fe ff59 	bl	8000b44 <lcd_clear>
			lcd_set_position(&LCD2, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	481d      	ldr	r0, [pc, #116]	; (8001d0c <main+0x3b4>)
 8001c98:	f7fe feac 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD2,"Wrong ID!");
 8001c9c:	491c      	ldr	r1, [pc, #112]	; (8001d10 <main+0x3b8>)
 8001c9e:	481b      	ldr	r0, [pc, #108]	; (8001d0c <main+0x3b4>)
 8001ca0:	f7fe fd7e 	bl	80007a0 <lcd_send_string>
			lcd_set_position(&LCD2, 2, 3);
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4818      	ldr	r0, [pc, #96]	; (8001d0c <main+0x3b4>)
 8001caa:	f7fe fea3 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD2,"Try Again");
 8001cae:	4919      	ldr	r1, [pc, #100]	; (8001d14 <main+0x3bc>)
 8001cb0:	4816      	ldr	r0, [pc, #88]	; (8001d0c <main+0x3b4>)
 8001cb2:	f7fe fd75 	bl	80007a0 <lcd_send_string>

			for(i=0;i<3;i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cba:	e009      	b.n	8001cd0 <main+0x378>
			{
				MCAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	480f      	ldr	r0, [pc, #60]	; (8001cfc <main+0x3a4>)
 8001cc0:	f7ff fa7b 	bl	80011ba <MCAL_GPIO_TogglePin>
				dms(150);
 8001cc4:	2096      	movs	r0, #150	; 0x96
 8001cc6:	f7ff fb27 	bl	8001318 <dms>
			for(i=0;i<3;i++)
 8001cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ccc:	3301      	adds	r3, #1
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	ddf2      	ble.n	8001cbc <main+0x364>
			}
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //to ensure Red Led off after toggle
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4808      	ldr	r0, [pc, #32]	; (8001cfc <main+0x3a4>)
 8001cdc:	f7ff fa56 	bl	800118c <MCAL_GPIO_WritePin>

			Welcome();
 8001ce0:	f000 f83e 	bl	8001d60 <Welcome>
			dms(150);
 8001ce4:	2096      	movs	r0, #150	; 0x96
 8001ce6:	f7ff fb17 	bl	8001318 <dms>
			LCD_Display_Empty_Slots();
 8001cea:	f000 f859 	bl	8001da0 <LCD_Display_Empty_Slots>
			RFID_CARD_EXIT =0;
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <main+0x3a8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	801a      	strh	r2, [r3, #0]
			RFID_CARD_Enter =0;
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <main+0x3b0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	801a      	strh	r2, [r3, #0]
		if(Available_Slots>'0')
 8001cfa:	e692      	b.n	8001a22 <main+0xca>
 8001cfc:	40010800 	.word	0x40010800
 8001d00:	200000a6 	.word	0x200000a6
 8001d04:	200000ab 	.word	0x200000ab
 8001d08:	200000a4 	.word	0x200000a4
 8001d0c:	20000028 	.word	0x20000028
 8001d10:	08002138 	.word	0x08002138
 8001d14:	08002144 	.word	0x08002144

08001d18 <RFID_CARD_Enter_CallBack>:
}


/*Call Back For UART*/
void RFID_CARD_Enter_CallBack(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &RFID_CARD_Enter, USART_disable);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4905      	ldr	r1, [pc, #20]	; (8001d34 <RFID_CARD_Enter_CallBack+0x1c>)
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <RFID_CARD_Enter_CallBack+0x20>)
 8001d22:	f7ff fc4d 	bl	80015c0 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &RFID_CARD_Enter, USART_enable);
 8001d26:	2201      	movs	r2, #1
 8001d28:	4902      	ldr	r1, [pc, #8]	; (8001d34 <RFID_CARD_Enter_CallBack+0x1c>)
 8001d2a:	4803      	ldr	r0, [pc, #12]	; (8001d38 <RFID_CARD_Enter_CallBack+0x20>)
 8001d2c:	f7ff fbd6 	bl	80014dc <MCAL_UART_SendData>
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200000a4 	.word	0x200000a4
 8001d38:	40013800 	.word	0x40013800

08001d3c <RFID_CARD_EXIT_CallBack>:

void RFID_CARD_EXIT_CallBack(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART2, &RFID_CARD_EXIT, USART_disable);
 8001d40:	2200      	movs	r2, #0
 8001d42:	4905      	ldr	r1, [pc, #20]	; (8001d58 <RFID_CARD_EXIT_CallBack+0x1c>)
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <RFID_CARD_EXIT_CallBack+0x20>)
 8001d46:	f7ff fc3b 	bl	80015c0 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART2, &RFID_CARD_EXIT, USART_enable);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4902      	ldr	r1, [pc, #8]	; (8001d58 <RFID_CARD_EXIT_CallBack+0x1c>)
 8001d4e:	4803      	ldr	r0, [pc, #12]	; (8001d5c <RFID_CARD_EXIT_CallBack+0x20>)
 8001d50:	f7ff fbc4 	bl	80014dc <MCAL_UART_SendData>
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200000a6 	.word	0x200000a6
 8001d5c:	40004400 	.word	0x40004400

08001d60 <Welcome>:



void Welcome(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0

	lcd_clear(&LCD2);
 8001d64:	480b      	ldr	r0, [pc, #44]	; (8001d94 <Welcome+0x34>)
 8001d66:	f7fe feed 	bl	8000b44 <lcd_clear>
	lcd_set_position(&LCD2, 1, 1);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <Welcome+0x34>)
 8001d70:	f7fe fe40 	bl	80009f4 <lcd_set_position>
	lcd_send_string(&LCD2,"Welcome in");
 8001d74:	4908      	ldr	r1, [pc, #32]	; (8001d98 <Welcome+0x38>)
 8001d76:	4807      	ldr	r0, [pc, #28]	; (8001d94 <Welcome+0x34>)
 8001d78:	f7fe fd12 	bl	80007a0 <lcd_send_string>
	lcd_set_position(&LCD2,2,0 );
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2102      	movs	r1, #2
 8001d80:	4804      	ldr	r0, [pc, #16]	; (8001d94 <Welcome+0x34>)
 8001d82:	f7fe fe37 	bl	80009f4 <lcd_set_position>
	lcd_send_string(&LCD2,"BENWAFDY Parking");
 8001d86:	4905      	ldr	r1, [pc, #20]	; (8001d9c <Welcome+0x3c>)
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <Welcome+0x34>)
 8001d8a:	f7fe fd09 	bl	80007a0 <lcd_send_string>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000028 	.word	0x20000028
 8001d98:	08002150 	.word	0x08002150
 8001d9c:	0800215c 	.word	0x0800215c

08001da0 <LCD_Display_Empty_Slots>:

void LCD_Display_Empty_Slots(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	lcd_clear(&LCD2);
 8001da4:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <LCD_Display_Empty_Slots+0x38>)
 8001da6:	f7fe fecd 	bl	8000b44 <lcd_clear>
	lcd_set_position(&LCD2, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	480a      	ldr	r0, [pc, #40]	; (8001dd8 <LCD_Display_Empty_Slots+0x38>)
 8001db0:	f7fe fe20 	bl	80009f4 <lcd_set_position>
	lcd_send_string(&LCD2,"Empty Slots=");
 8001db4:	4909      	ldr	r1, [pc, #36]	; (8001ddc <LCD_Display_Empty_Slots+0x3c>)
 8001db6:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <LCD_Display_Empty_Slots+0x38>)
 8001db8:	f7fe fcf2 	bl	80007a0 <lcd_send_string>
	lcd_set_position(&LCD2, 0, 14);
 8001dbc:	220e      	movs	r2, #14
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <LCD_Display_Empty_Slots+0x38>)
 8001dc2:	f7fe fe17 	bl	80009f4 <lcd_set_position>
	lcd_send_char(&LCD2,Available_Slots);
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <LCD_Display_Empty_Slots+0x40>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <LCD_Display_Empty_Slots+0x38>)
 8001dce:	f7fe fc21 	bl	8000614 <lcd_send_char>
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000028 	.word	0x20000028
 8001ddc:	08002170 	.word	0x08002170
 8001de0:	20000010 	.word	0x20000010

08001de4 <LEDs_Init>:

void LEDs_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
	//RED LED A0
	GPIO_PIN_CONFIG_T PinCinfg;
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_0;
 8001dea:	2301      	movs	r3, #1
 8001dec:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001dee:	2304      	movs	r3, #4
 8001df0:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 8001df2:	2301      	movs	r3, #1
 8001df4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4809      	ldr	r0, [pc, #36]	; (8001e20 <LEDs_Init+0x3c>)
 8001dfc:	f7ff f918 	bl	8001030 <MCAL_GPIO_Init>

	//GREEN LED A11
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_11;
 8001e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e04:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001e06:	2304      	movs	r3, #4
 8001e08:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <LEDs_Init+0x3c>)
 8001e14:	f7ff f90c 	bl	8001030 <MCAL_GPIO_Init>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40010800 	.word	0x40010800

08001e24 <PIRs_Init>:

void PIRs_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
	//PIR1 A7
	GPIO_PIN_CONFIG_T PinCinfg;
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_7;
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	480d      	ldr	r0, [pc, #52]	; (8001e6c <PIRs_Init+0x48>)
 8001e38:	f7ff f8fa 	bl	8001030 <MCAL_GPIO_Init>

	//PIR2 A1
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_1;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8001e40:	2302      	movs	r3, #2
 8001e42:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4808      	ldr	r0, [pc, #32]	; (8001e6c <PIRs_Init+0x48>)
 8001e4a:	f7ff f8f1 	bl	8001030 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2101      	movs	r1, #1
 8001e52:	4806      	ldr	r0, [pc, #24]	; (8001e6c <PIRs_Init+0x48>)
 8001e54:	f7ff f99a 	bl	800118c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e5e:	4803      	ldr	r0, [pc, #12]	; (8001e6c <PIRs_Init+0x48>)
 8001e60:	f7ff f994 	bl	800118c <MCAL_GPIO_WritePin>

}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40010800 	.word	0x40010800

08001e70 <Register_IDs_From_Admin>:

void Register_IDs_From_Admin(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
			lcd_send_command(&LCD1, display_on_cursor_off);
 8001e74:	210c      	movs	r1, #12
 8001e76:	485e      	ldr	r0, [pc, #376]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001e78:	f7fe fcf6 	bl	8000868 <lcd_send_command>
			lcd_set_position(&LCD1, 0, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	485b      	ldr	r0, [pc, #364]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001e82:	f7fe fdb7 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD1,"IDs of system");
 8001e86:	495b      	ldr	r1, [pc, #364]	; (8001ff4 <Register_IDs_From_Admin+0x184>)
 8001e88:	4859      	ldr	r0, [pc, #356]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001e8a:	f7fe fc89 	bl	80007a0 <lcd_send_string>
			lcd_set_position(&LCD1, 2, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2102      	movs	r1, #2
 8001e92:	4857      	ldr	r0, [pc, #348]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001e94:	f7fe fdae 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD1,"First  ID:");
 8001e98:	4957      	ldr	r1, [pc, #348]	; (8001ff8 <Register_IDs_From_Admin+0x188>)
 8001e9a:	4855      	ldr	r0, [pc, #340]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001e9c:	f7fe fc80 	bl	80007a0 <lcd_send_string>
			while(keypad_Read()=='N');
 8001ea0:	bf00      	nop
 8001ea2:	f7fe f9b3 	bl	800020c <keypad_Read>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b4e      	cmp	r3, #78	; 0x4e
 8001eaa:	d0fa      	beq.n	8001ea2 <Register_IDs_From_Admin+0x32>
			pass[0]=keypad_Read();
 8001eac:	f7fe f9ae 	bl	800020c <keypad_Read>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b51      	ldr	r3, [pc, #324]	; (8001ffc <Register_IDs_From_Admin+0x18c>)
 8001eb6:	701a      	strb	r2, [r3, #0]
			while(keypad_Read()!='N');
 8001eb8:	bf00      	nop
 8001eba:	f7fe f9a7 	bl	800020c <keypad_Read>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b4e      	cmp	r3, #78	; 0x4e
 8001ec2:	d1fa      	bne.n	8001eba <Register_IDs_From_Admin+0x4a>
			lcd_set_position(&LCD1,14,1 );
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	210e      	movs	r1, #14
 8001ec8:	4849      	ldr	r0, [pc, #292]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001eca:	f7fe fd93 	bl	80009f4 <lcd_set_position>
			lcd_send_char(&LCD1, pass[0]);
 8001ece:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <Register_IDs_From_Admin+0x18c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4846      	ldr	r0, [pc, #280]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001ed6:	f7fe fb9d 	bl	8000614 <lcd_send_char>
			lcd_send_command(&LCD1, display_on_cursor_off);
 8001eda:	210c      	movs	r1, #12
 8001edc:	4844      	ldr	r0, [pc, #272]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001ede:	f7fe fcc3 	bl	8000868 <lcd_send_command>

			lcd_set_position(&LCD1, 3, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	4842      	ldr	r0, [pc, #264]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001ee8:	f7fe fd84 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD1,"Second ID:");
 8001eec:	4944      	ldr	r1, [pc, #272]	; (8002000 <Register_IDs_From_Admin+0x190>)
 8001eee:	4840      	ldr	r0, [pc, #256]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001ef0:	f7fe fc56 	bl	80007a0 <lcd_send_string>
			while(keypad_Read()=='N');
 8001ef4:	bf00      	nop
 8001ef6:	f7fe f989 	bl	800020c <keypad_Read>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b4e      	cmp	r3, #78	; 0x4e
 8001efe:	d0fa      	beq.n	8001ef6 <Register_IDs_From_Admin+0x86>
			pass[1]=keypad_Read();
 8001f00:	f7fe f984 	bl	800020c <keypad_Read>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <Register_IDs_From_Admin+0x18c>)
 8001f0a:	705a      	strb	r2, [r3, #1]
			while(keypad_Read()!='N');
 8001f0c:	bf00      	nop
 8001f0e:	f7fe f97d 	bl	800020c <keypad_Read>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b4e      	cmp	r3, #78	; 0x4e
 8001f16:	d1fa      	bne.n	8001f0e <Register_IDs_From_Admin+0x9e>
			lcd_set_position(&LCD1, 10,2);
 8001f18:	2202      	movs	r2, #2
 8001f1a:	210a      	movs	r1, #10
 8001f1c:	4834      	ldr	r0, [pc, #208]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f1e:	f7fe fd69 	bl	80009f4 <lcd_set_position>
			lcd_send_char(&LCD1, pass[1]);
 8001f22:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <Register_IDs_From_Admin+0x18c>)
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	4619      	mov	r1, r3
 8001f28:	4831      	ldr	r0, [pc, #196]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f2a:	f7fe fb73 	bl	8000614 <lcd_send_char>
			lcd_send_command(&LCD1, display_on_cursor_off);
 8001f2e:	210c      	movs	r1, #12
 8001f30:	482f      	ldr	r0, [pc, #188]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f32:	f7fe fc99 	bl	8000868 <lcd_send_command>

			lcd_set_position(&LCD1, 4, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2104      	movs	r1, #4
 8001f3a:	482d      	ldr	r0, [pc, #180]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f3c:	f7fe fd5a 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD1,"Third  ID:");
 8001f40:	4930      	ldr	r1, [pc, #192]	; (8002004 <Register_IDs_From_Admin+0x194>)
 8001f42:	482b      	ldr	r0, [pc, #172]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f44:	f7fe fc2c 	bl	80007a0 <lcd_send_string>
			while(keypad_Read()=='N');
 8001f48:	bf00      	nop
 8001f4a:	f7fe f95f 	bl	800020c <keypad_Read>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b4e      	cmp	r3, #78	; 0x4e
 8001f52:	d0fa      	beq.n	8001f4a <Register_IDs_From_Admin+0xda>
			pass[2]=keypad_Read();
 8001f54:	f7fe f95a 	bl	800020c <keypad_Read>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <Register_IDs_From_Admin+0x18c>)
 8001f5e:	709a      	strb	r2, [r3, #2]
			while(keypad_Read()!='N');
 8001f60:	bf00      	nop
 8001f62:	f7fe f953 	bl	800020c <keypad_Read>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b4e      	cmp	r3, #78	; 0x4e
 8001f6a:	d1fa      	bne.n	8001f62 <Register_IDs_From_Admin+0xf2>
			lcd_set_position(&LCD1, 10,3 );
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	210a      	movs	r1, #10
 8001f70:	481f      	ldr	r0, [pc, #124]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f72:	f7fe fd3f 	bl	80009f4 <lcd_set_position>
			lcd_send_char(&LCD1, pass[2]);
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <Register_IDs_From_Admin+0x18c>)
 8001f78:	789b      	ldrb	r3, [r3, #2]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f7e:	f7fe fb49 	bl	8000614 <lcd_send_char>
			lcd_send_command(&LCD1, display_on_cursor_off);
 8001f82:	210c      	movs	r1, #12
 8001f84:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f86:	f7fe fc6f 	bl	8000868 <lcd_send_command>


			lcd_clear(&LCD1);
 8001f8a:	4819      	ldr	r0, [pc, #100]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f8c:	f7fe fdda 	bl	8000b44 <lcd_clear>
			lcd_set_position(&LCD1, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f96:	f7fe fd2d 	bl	80009f4 <lcd_set_position>
			lcd_send_string(&LCD1,"IDs are Stored");
 8001f9a:	491b      	ldr	r1, [pc, #108]	; (8002008 <Register_IDs_From_Admin+0x198>)
 8001f9c:	4814      	ldr	r0, [pc, #80]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001f9e:	f7fe fbff 	bl	80007a0 <lcd_send_string>
			lcd_send_command(&LCD1, display_on_cursor_off);
 8001fa2:	210c      	movs	r1, #12
 8001fa4:	4812      	ldr	r0, [pc, #72]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001fa6:	f7fe fc5f 	bl	8000868 <lcd_send_command>

			lcd_set_position(&LCD1, 2, 4);
 8001faa:	2204      	movs	r2, #4
 8001fac:	2102      	movs	r1, #2
 8001fae:	4810      	ldr	r0, [pc, #64]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001fb0:	f7fe fd20 	bl	80009f4 <lcd_set_position>
			lcd_send_char(&LCD1, pass[0]);
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <Register_IDs_From_Admin+0x18c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001fbc:	f7fe fb2a 	bl	8000614 <lcd_send_char>
			lcd_set_position(&LCD1, 2, 8);
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	480a      	ldr	r0, [pc, #40]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001fc6:	f7fe fd15 	bl	80009f4 <lcd_set_position>
			lcd_send_char(&LCD1, pass[1]);
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <Register_IDs_From_Admin+0x18c>)
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001fd2:	f7fe fb1f 	bl	8000614 <lcd_send_char>
			lcd_set_position(&LCD1, 2, 12);
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001fdc:	f7fe fd0a 	bl	80009f4 <lcd_set_position>
			lcd_send_char(&LCD1, pass[2]);
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <Register_IDs_From_Admin+0x18c>)
 8001fe2:	789b      	ldrb	r3, [r3, #2]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <Register_IDs_From_Admin+0x180>)
 8001fe8:	f7fe fb14 	bl	8000614 <lcd_send_char>
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000014 	.word	0x20000014
 8001ff4:	08002180 	.word	0x08002180
 8001ff8:	08002190 	.word	0x08002190
 8001ffc:	200000a8 	.word	0x200000a8
 8002000:	0800219c 	.word	0x0800219c
 8002004:	080021a8 	.word	0x080021a8
 8002008:	080021b4 	.word	0x080021b4

0800200c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800200e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002010:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002014:	480c      	ldr	r0, [pc, #48]	; (8002048 <LoopForever+0x6>)
  ldr r1, =_edata
 8002016:	490d      	ldr	r1, [pc, #52]	; (800204c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002018:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <LoopForever+0xe>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800202c:	4c0a      	ldr	r4, [pc, #40]	; (8002058 <LoopForever+0x16>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800203a:	f000 f811 	bl	8002060 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800203e:	f7ff fc8b 	bl	8001958 <main>

08002042 <LoopForever>:

LoopForever:
  b LoopForever
 8002042:	e7fe      	b.n	8002042 <LoopForever>
  ldr   r0, =_estack
 8002044:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002050:	080021e4 	.word	0x080021e4
  ldr r2, =_sbss
 8002054:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002058:	200000ac 	.word	0x200000ac

0800205c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC1_2_IRQHandler>
	...

08002060 <__libc_init_array>:
 8002060:	b570      	push	{r4, r5, r6, lr}
 8002062:	2600      	movs	r6, #0
 8002064:	4d0c      	ldr	r5, [pc, #48]	; (8002098 <__libc_init_array+0x38>)
 8002066:	4c0d      	ldr	r4, [pc, #52]	; (800209c <__libc_init_array+0x3c>)
 8002068:	1b64      	subs	r4, r4, r5
 800206a:	10a4      	asrs	r4, r4, #2
 800206c:	42a6      	cmp	r6, r4
 800206e:	d109      	bne.n	8002084 <__libc_init_array+0x24>
 8002070:	f000 f81a 	bl	80020a8 <_init>
 8002074:	2600      	movs	r6, #0
 8002076:	4d0a      	ldr	r5, [pc, #40]	; (80020a0 <__libc_init_array+0x40>)
 8002078:	4c0a      	ldr	r4, [pc, #40]	; (80020a4 <__libc_init_array+0x44>)
 800207a:	1b64      	subs	r4, r4, r5
 800207c:	10a4      	asrs	r4, r4, #2
 800207e:	42a6      	cmp	r6, r4
 8002080:	d105      	bne.n	800208e <__libc_init_array+0x2e>
 8002082:	bd70      	pop	{r4, r5, r6, pc}
 8002084:	f855 3b04 	ldr.w	r3, [r5], #4
 8002088:	4798      	blx	r3
 800208a:	3601      	adds	r6, #1
 800208c:	e7ee      	b.n	800206c <__libc_init_array+0xc>
 800208e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002092:	4798      	blx	r3
 8002094:	3601      	adds	r6, #1
 8002096:	e7f2      	b.n	800207e <__libc_init_array+0x1e>
 8002098:	080021dc 	.word	0x080021dc
 800209c:	080021dc 	.word	0x080021dc
 80020a0:	080021dc 	.word	0x080021dc
 80020a4:	080021e0 	.word	0x080021e0

080020a8 <_init>:
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020aa:	bf00      	nop
 80020ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ae:	bc08      	pop	{r3}
 80020b0:	469e      	mov	lr, r3
 80020b2:	4770      	bx	lr

080020b4 <_fini>:
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b6:	bf00      	nop
 80020b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ba:	bc08      	pop	{r3}
 80020bc:	469e      	mov	lr, r3
 80020be:	4770      	bx	lr
